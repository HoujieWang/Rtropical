for(col.num in (row.num+1):m){
vecTreesVec[col.num-row.num+(m-1+(m-1-row.num+2))*(row.num-1)/2]<-x[row.num,col.num]
}
}
vecTreesVec
}
vec.fun<-function(x){ # x should be a tree object
x = cophenetic(x)
return(x[lower.tri(x)])
}
# Function ----------------------------------------------------------------
tropDist_par <- function(pc_base, distVec_all){
proj_points <- parLapply(cl, distVec_all, project_pi , D_s = pc_base)
tropical_dist_vec <- unlist(clusterMap(cl, tropical_dist, distVec_all, proj_points))
sum_dist <- sum(tropical_dist_vec)
return(sum_dist)
}
#function to get tropical distance of two points
tropical_dist<-function(D_1,D_2){
e <- length(D_1)
t_dist <- 0
for(i in 1:(e-1)){
for(j in (i+1):e){
if(abs(D_1[i]-D_2[i]-D_1[j]+D_2[j])>t_dist){
t_dist<-abs(D_1[i]-D_2[i]-D_1[j]+D_2[j])
}
}
}
t_dist
}
# tropical_dist <- function(D_1,D_2){
#   mm <- D_1 - D_2
#   max(abs(diff(mm)))
# }
# t1 <- Sys.time()
# tropical_dist(D_1,D_2)
# t2 <- Sys.time()
# t2 - t1
#
# (t2 - t1)*20000
#
# t3 <- Sys.time()
# trop_mmp(D_1,D_2)
# t4 <- Sys.time()
# t4 - t3
tropDist <- function(pc_base, distVec_all){
proj_points <- parLapply(cl, distVec_all, project_pi , D_s = pc_base)
tropical_dist_vec <- mapply(tropical_dist, distVec_all, proj_points)
sum_dist <- sum(tropical_dist_vec)
return(sum_dist)
}
tropDistSum <- function(pc_base, distVec_all){
proj_points <- parLapply(cl, distVec_all, project_pi , D_s = pc_base)
tropical_dist_vec <- mapply(tropical_dist, distVec_all, proj_points)
sum_dist <- sum(tropical_dist_vec)
return(sum_dist)
}
# tropDist <- function(pc_base, distVec_all){
#
#   proj_points <- lapply(distVec_all, project_pi , D_s = pc_base)
#   tropical_dist_vec <- mapply(tropical_dist, distVec_all, proj_points)
#   sum_dist <- sum(tropical_dist_vec)
#
#   label_output<-list(pc_base,proj_points,tropical.dist.vec,sum_dist)
#
#   return(label_output)
# }
# Build a new function
distMat <- function(trees, tipOrder){ # Here trees should be a list
# trees = tree_set1
# tipOrder = tree_set1[[1]]$tip.label
if(class(trees)=="multiPhylo"){
trees_root <- root(trees, outgroup = tipOrder[1],resolve.root=TRUE)
# chronotrees <- parLapply(cl, trees_root, chronos)
# dist_chrono <- parLapply(cl, chronotrees,cophenetic)
#
# dist_ordered <- parLapply(cl, dist_chrono, function(x) x[tipOrder, tipOrder])
# distVec_all <- parLapply(cl, dist_ordered,vec_fun)
chronotrees <- lapply( trees_root, chronos)
dist_chrono <- lapply(chronotrees,cophenetic)
dist_ordered <- lapply( dist_chrono, function(x) x[tipOrder, tipOrder])
distVec_all <- lapply( dist_ordered,vec_fun)
}else {
treeOne <- root(trees, outgroup = tipOrder[1],resolve.root=TRUE)
chronoTree <- chronos(treeOne)
dist_chrono_one <- cophenetic(chronoTree)
dist_ordered_one <- dist_chrono_one[tipOrder, tipOrder]
distVec_all <- vec_fun(dist_ordered_one)
}
return(distVec_all)
}
normalize.ultrametrices <- function(D){
k <- ncol(D)
new.D <- matrix(rep(0, 2*k), nrow=2, ncol=k)
for(i in 2:3)
new.D[i-1, ] <- D[i, ] - D[1, ]
return(new.D)
}
# input: matrix D of size (s x e) whose rows are vertices of tropical polytope, point P in rowspan(D)
#output: point Q corresponding to P in column span of D
polytope_iso<-function(D, P){
e = length(P)
s = dim(D)[[1]]
Q = mat.or.vec(1, s)
for (i in seq(s)){
maxvalue = D[i,1] - P[[1]]
for (j in seq(e)){
maxvalue = max(maxvalue, D[i,j] - P[[j]])
}
Q[[i]]=maxvalue
}
return(Q)
}
normalize.proj<-function(D){
r<-length(D)
D.new<-rep(NA,r)
for(i in 1:r){
D.new[i]<-D[i] - D[1]
}
return(D.new)
}
tropical.geodesic.dim.2 <- function(D1, D2, flag = 0){
k <- length(D1)
if(k != 2) warning("dimension has to be 2!")
for(i in 1:k)
D1[i] <- round(D1[i], 4)
for(i in 1:k)
D2[i] <- round(D2[i], 4)
if(length(D2) != k)
warning("dimension is wrong!")
addd <- 0
if(flag == 1){
tmp.D <- D2
D2 <- D1
D1 <- tmp.D
}
tmp.metric <- (D2 - D1)
sorted.tmp.metric <- sort.int(tmp.metric, index.return=TRUE)
##cat(sorted.tmp.metric$x, "\n")
D <- rep(0, k)
D[sorted.tmp.metric$ix[2]] <- D2[sorted.tmp.metric$ix[2]]
D[sorted.tmp.metric$ix[1]] <- min(D2[sorted.tmp.metric$ix[2]] - D1[sorted.tmp.metric$ix[2]] + D1[sorted.tmp.metric$ix[1]], D1[sorted.tmp.metric$ix[1]])
distance <- max(abs(D1 - D))
distance <- distance + max(abs(D2 - D))
segment <- matrix(rep(0, 6), nrow=2, ncol=3)
segment[,1] <- D1
segment[,2] <- D
segment[,3] <- D2
return(list(segment, distance))
}
# From Rory ---------------------------------------------------------------
modTree <- function(pc_trees, k){
for(i in 1:3){
tree <- pc_trees[[i]]
# Leaves permutation
m <- length(tree$tip.label) # number of leaves
leaves_index <- sample(m,k) # 5 11 1
leaves_post <- resample(leaves_index,k)  # sample(leaves_index,k)
tree$tip.label[leaves_index] <- tree$tip.label[leaves_post]
inner_index <- !c(tree$edge[,2] %in% 1:m)
internal_branch_index <- resample(c(1:length(tree$edge[,2]))[inner_index],1)
epsilon <- sample(c(-1, 1), 1)
c <- runif(1,0,tree$edge.length[internal_branch_index]/m)
b1 <- tree$edge.length[internal_branch_index] + epsilon*c
b2_index <- resample(c(which(tree$edge[,1] %in% tree$edge[,2][internal_branch_index]), which(tree$edge[,2] %in% tree$edge[,1][internal_branch_index])), 1)
l <- tree$edge.length[b2_index]
if((l - epsilon*c) < 0){
l <- 0
b1 <- (b1 + l - epsilon*c)
}else{
l <- (l - epsilon*c)
}
tree$edge.length[internal_branch_index] <- b1
tree$edge.length[b2_index] <- l
if (is.ultrametric(tree) == FALSE){
ultra_tree <- nnls.tree(cophenetic(tree),tree,rooted=TRUE,trace=0)
if ( sum(ultra_tree$edge.length <= 0) > 0){
ultra_tree <- force.ultrametric(tree,method = "extend")
}
ultra_tree$edge.length <- ultra_tree$edge.length/max(ultra_tree$edge.length)
tree <- ultra_tree
} else (tree$edge.length <- tree$edge.length/max(tree$edge.length))
pc_trees[[i]] <- tree
}
return(pc_trees)
}
MCMC_loop <- function(Gene_Total,cool_rate,hot_rate){
# Set up some parameters
n <- length(Gene_Total[[1]]$tip.label)
pcs <- 3
to<- Gene_Total[[1]]$tip.label
N <- length(Gene_Total)
distVec_all <- distMat(Gene_Total, tipOrder = to)
# Sample three random trees to act as a tree base for measuring and finding Tropical PCA
base_trees <- Gene_Total[sample(N,3)]         #sample three random trees
base <- distMat(base_trees, tipOrder = to)
D_base <- matrix(unlist(base), ncol=pcs)
sumDistance_base <- tropDist(D_base, distVec_all)
res <- rep(NA,N)
i <- 1
C <- cool_rate
k <- n-1
sumDistance_best <- 100000     # depending on number of gene trees in Gene_Total you may want to change this... 10,000 was too low with 8000 gene trees
counter <- 0                    # keeps track of cooling
### Trop MCMC Loop
# MCMC Loop, slowly cools down then heats up to another point, also changed to 10,000 iterations because of the hot_rate
for(i in 1:10){
if(i %% C  == 0 & k > 1) k <- k - 1
update_trees <- modTree(base_trees,k)
update <- distMat(update_trees, tipOrder = to)
D_update <- matrix(unlist(update), ncol=pcs)
sumDistance_update <- tropDist(D_update, distVec_all)
if(sumDistance_update <= sumDistance_best){
best_trees <- update_trees
sumDistance_best <- sumDistance_update
counter <- 0                # if an improvement is ever made, the cool_rate_counter is set back to 0 because we've improved
}else{
counter <- counter + 1      # adds to the 'coldness' in order to reheats process if necessary
}
p <- min(1, sumDistance_base/sumDistance_update)     # probability we accept the new PCA base
if(sample(c(0,1),1,prob = c(1-p,p)) == 1){
sumDistance_base <- sumDistance_update
base_trees <- update_trees
}
if (counter>hot_rate) {          # if the process is stagnant for too long then we decide to pick up and start at a new point
k <- n
base_trees <- Gene_Total[sample(N,3)]
counter <- 0
}
res[i] <- sumDistance_base
#print(c(i, res[i],sumDistance_best, p,k,counter))    # turned off printing due to higher iterations
}
print(sumDistance_best)
return(best_trees)
}
# Sample function for sampling one thing one time
resample <- function(x, ...) x[sample.int(length(x), ...)]
# This function is used for calculating R-Square
fermatweberdistance <- function(datamatrix) {
n = dim(datamatrix)[1]
m = dim(datamatrix)[2]
lprec <- make.lp(0, n+m)
objective = mat.or.vec(n+m,1)
for (i in seq(n)) {
objective[i] = 1
}
set.objfn(lprec, objective)
for (i in seq(n)) {
for (j in seq(m)) {
for (k in seq(m)) {
v = mat.or.vec(n+m,1)
v[i] = 1
v[n+k] = 1
v[n+j] = -1
add.constraint(lprec, v, ">=", datamatrix[i,k] - datamatrix[i,j])
}
}
}
solve(lprec)
return((get.objective(lprec)))
}
# Function to recreate the upper triangular matrix
make.matrix <- function(D, n, tips){
dd <- matrix(rep(0, n*n), nrow=n, ncol=n, byrow=TRUE)
count <- 1
for(i in 1:(n-1))
for(j in (i + 1):n){
dd[i, j] <- D[count]
dd[j, i] <- dd[i, j]
count <- count+1
}
mymatrix <- matrix(dd, nrow=n, ncol=n, byrow=TRUE, dimnames=list(tips,tips))
return(mymatrix)
}
# Function to plot the tropical upper triangular
plot.trop.triangle <- function(D, colorInd){
# D = t(x)
k <- ncol(D)
plot(D[1,],D[2,])
for(i in 1:(k - 1)){
for(j in (i + 1):k){
tseg1 <- tropical.geodesic.dim.2(D[,i],D[,j])
tseg2 <- tropical.geodesic.dim.2(D[,i],D[,j],flag=1)
if(tseg1[[2]] < tseg2[[2]]) tseg <- tseg1
else tseg <- tseg2
segments(tseg[[1]][1,1],tseg[[1]][2,1],tseg[[1]][1,2],tseg[[1]][2,2],col= 'black')
segments(tseg[[1]][1,2],tseg[[1]][2,2],tseg[[1]][1,3],tseg[[1]][2,3],col= 'black')
}
}
points(x=proj_2D_plot_m[,2],y=proj_2D_plot_m[,3],pch=16,cex=.75,col=colorInd)
}
trop_pca_proj_plot <- function(Genes_Total,best_trees,SD_size){
# Set up some parameters
n <- length(Genes_Total[[1]]$tip.label)
pcs <- 3
to<- Genes_Total[[1]]$tip.label
N <- length(Genes_Total)
# Create distance measures
distVec_all <- distMat(Genes_Total, tipOrder = to)
D_all <- matrix(unlist(distVec_all), ncol=N)
distVec_comb <- distMat(best_trees, tipOrder = to)
N <- length(distVec_comb)
D_comb <- matrix(unlist(distVec_comb), ncol=N)
### Tropical PCA Projections
sumDist_best <- tropDist(D_comb, distVec_all)
new_base <- D_comb
numvectors <- dim(D_all)[2]
adj_proj_points <- lapply(distVec_all,project_pi,D_s=new_base)
proj_trees_matrix <-lapply(adj_proj_points,make.matrix,n=n,tips=to)
proj_trees <- lapply(proj_trees_matrix,upgma)
DD_base = t(new_base)
D_base <- normalize.ultrametrices(DD_base)
proj_points_plot<-lapply(adj_proj_points,polytope_iso,D=DD_base) # changed with our projected points from new tropMCMC
proj_plot_norm<-lapply(proj_points_plot,normalize.proj)
N <- length(proj_plot_norm)
proj_2D_plot_m<-matrix(unlist(proj_plot_norm),nrow=N,ncol=3,byrow=T)
rich8equal = c("#0081FF", "tomato3","seagreen1", "wheat4","mediumorchid1", "#FDEE02", "#FFAB00", "gainsboro","cyan","black")
## Tropical Triangle 2D Plot by Species Tree
#pdf(paste("./","Tropical_Triangle_2D_8SpecTrees_",SD_size,".pdf", sep=""),width = 5, height = 10)
#plot.trop.triangle(D_base, colorInd = freq)
#par(mfrow=c(1,1))
#k <- ncol(D_base)
#plot(D_base[1,],D_base[2,])
#for(i in 1:(k - 1)){
#  for(j in (i + 1):k){
#    tseg1 <- tropical.geodesic.dim.2(D_base[,i],D_base[,j])
#    tseg2 <- tropical.geodesic.dim.2(D_base[,i],D_base[,j],flag=1)
#    if(tseg1[[2]] < tseg2[[2]]) tseg <- tseg1
#    else tseg <- tseg2
#    segments(tseg[[1]][1,1],tseg[[1]][2,1],tseg[[1]][1,2],tseg[[1]][2,2],col= 'black')
#    segments(tseg[[1]][1,2],tseg[[1]][2,2],tseg[[1]][1,3],tseg[[1]][2,3],col= 'black')
#  }
#}
#points(x=proj_2D_plot_m[1:1000,2],y=proj_2D_plot_m[1:1000,3],pch=16,cex=0.6,col= "red")
#points(x=proj_2D_plot_m[1001:2000,2],y=proj_2D_plot_m[1001:2000,3],pch=16,cex=0.6,col= "blue")
#points(x=proj_2D_plot_m[1:1000,2],y=proj_2D_plot_m[1:1000,3],pch=16,cex=0.4,col= 'blue')
#points(x=proj_2D_plot_m[1001:2000,2],y=proj_2D_plot_m[1001:2000,3],pch=16,cex=0.4,col= 'red')
#points(x=proj_2D_plot_m[2001:3000,2],y=proj_2D_plot_m[2001:3000,3],pch=16,cex=0.4,col= rich8equal[9])
#points(x=proj_2D_plot_m[3001:4000,2],y=proj_2D_plot_m[3001:4000,3],pch=16,cex=0.4,col= rich8equal[4])
#points(x=proj_2D_plot_m[4001:5000,2],y=proj_2D_plot_m[4001:5000,3],pch=16,cex=0.4,col= rich8equal[3])
#points(x=proj_2D_plot_m[5001:6000,2],y=proj_2D_plot_m[5001:6000,3],pch=16,cex=0.4,col= rich8equal[6])
#points(x=proj_2D_plot_m[6001:7000,2],y=proj_2D_plot_m[6001:7000,3],pch=16,cex=0.4,col= rich8equal[7])
#points(x=proj_2D_plot_m[7001:8000,2],y=proj_2D_plot_m[7001:8000,3],pch=16,cex=0.4,col= rich8equal[8])
#dev.off()
outputs <- list(sumDist_best,proj_2D_plot_m)
return(outputs)
}
TrPCA_MCMC <- function(sd_size,cold_rate,heat_rate,num_files){
nameFile <- list.files(paste("./",sd_size, sep=""),pattern = ".dat")
for (i in 1:num_files){
index <- i
assign(paste("gene",i,"trees",sep=""),read.nexus(paste("./",sd_size,"/",nameFile[index],sep=""))) #1000 trees, 10 tips
}
Genes_Total <- rmtree(2, n=10)
### Combine our 1000 genes trees from the different species trees into Genes_Total (2000 trees)
for (i in 1:length(gene1trees)){
Genes_Total[[i]] <- gene1trees[[i]]
if (2 <= num_files) Genes_Total[[i+length(gene1trees)]] <- gene2trees[[i]]
if (3 <= num_files) Genes_Total[[i+(2*length(gene1trees))]] <- gene3trees[[i]]
if (4 <= num_files) Genes_Total[[i+(3*length(gene1trees))]] <- gene4trees[[i]]
if (5 <= num_files) Genes_Total[[i+(4*length(gene1trees))]] <- gene5trees[[i]]
if (6 <= num_files) Genes_Total[[i+(5*length(gene1trees))]] <- gene6trees[[i]]
if (7 <= num_files) Genes_Total[[i+(6*length(gene1trees))]] <- gene7trees[[i]]
if (8 <= num_files) Genes_Total[[i+(7*length(gene1trees))]] <- gene8trees[[i]]
if (9 <= num_files) Genes_Total[[i+(8*length(gene1trees))]] <- gene9trees[[i]]
if (10 <= num_files) Genes_Total[[i+(9*length(gene1trees))]] <- gene10trees[[i]]
}
for (i in 1:length(Genes_Total)){
Genes_Total[[i]]$edge.length <- Genes_Total[[i]]$edge.length/max(Genes_Total[[i]]$edge.length)
}
for (i in 1:length(Genes_Total)){
tree <- Genes_Total[[i]]
if (is.ultrametric(tree) == FALSE){
ultra_tree <- nnls.tree(cophenetic(tree),tree,rooted=TRUE,trace=0)
if ( sum(ultra_tree$edge.length <= 0) > 0){
ultra_tree <- force.ultrametric(tree,method = "extend")
}
ultra_tree$edge.length <- ultra_tree$edge.length/max(ultra_tree$edge.length)
tree <- ultra_tree
} else (tree$edge.length <- tree$edge.length/max(tree$edge.length))
Genes_Total[[i]] <- tree
}
# MCMC HOT/COLD
btrees <- MCMC_loop(Genes_Total,cold_rate,heat_rate)
write.tree(btrees, paste("./z_comb_tree_",sd_size,".dat",sep = ""))
comb_trees <- read.tree(paste("./z_comb_tree_",sd_size,".dat",sep=""))
best_list <- trop_pca_proj_plot(Genes_Total,btrees,sd_size)
#r_proj_data<-matrix(unlist(proj_plot_norm),nrow=N,ncol=3,byrow=T)
# Explained Sum of Squares (SSReg)
sim_fermet<-fermatweberdistance(best_list[[2]])
# sum of distance_best (RSS)
sumDistance_best <- best_list[[1]]
# r^2 calculation  (SSReg / SST)
r2 <- sim_fermet/(sumDistance_best+sim_fermet)
#Output the SSReg, RSS, R^2 into .txt file
fileConn<- file(paste("./",sd_size,"_R2.txt",sep = ""))
writeLines(c(paste("fermet = ",sim_fermet,sep=""),paste("sum_dist = ",sumDistance_best,sep=""),paste("R^2 = ",r2,sep="")),fileConn)
close(fileConn)
return(Genes_Total)
}
N <- 3
tree_set1 <- list()
for (i in 1: N) tree_set1[[i]] <- rcoal(3)
class(tree_set1) <- "multiPhylo"
tree_set2 <- list()
for (i in 1: N) tree_set2[[i]] <- rcoal(3)
class(tree_set2) <- "multiPhylo"
write.nexus(tree_set1, file = "tree_set1.nex")
write.nexus(tree_set2, file = "tree_set2.nex")
tree_set_mat <- read.nexus.to.data.matrix("tree_set1.nex", "tree_set2.nex")
read.nexus.to.data.matrix2("tree_set1.nex", "tree_set2.nex")
head(tree_set_mat)
library(Rtropical)
library(Rtropical)
library(Rtropical)
dta1 = read.nexus.to.data.matrix("genetree_S1_r025.dat", "genetree_S2_r025.dat")
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
multiPhylo.to.data.matrix
libr
library(Rtropical)
multiPhylo.to.data.matrix
multiPhylo.to.data.matrix
library(Rtropical)
multiPhylo.to.data.matrix
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
?multiPhylo.to.data.matrix
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
install.packages("roxygen2")
install.packages("xfun")
install.packages("xfun")
install.packages("xfun")
install.packages(/Users/wanghoujie/Downloads/xfun_0.20.tar, repos = NULL, type="source")
install.packages("/Users/wanghoujie/Downloads/xfun_0.20.tar", repos = NULL, type="source")
install.packages("~/Downloads/xfun_0.20.tar", repos = NULL)
install.packages("xfun")
install.packages("xfun")
install.packages("ape")
install.packages("lpSolve")
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
?multiPhylo.to.data.matrix
?glmnet
library(glmnet)
?glmnet
library(Rtropical)
?tropsvm
library(Rtropical)
?tropsvm
library(Rtropical)
?tropsvm
library(Rtropical)
library(Rtropical)
>cv.tropsvm()
?cv.tropsvm
?print
library(Rtropical)
?summary.cv.tropsvm
library(Rtropical)
library(Rtropical)
library(Rtropical)
?summary.cv.tropsvm
?summary.cv.tropsvm
library(Rtropical)
?summary.cv.tropsvm
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
?cv.tropsvm
library(Rtropical)
