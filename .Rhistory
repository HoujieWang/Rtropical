}
linsp_to_poly = function(V){
pcs = nrow(V); e = ncol(V)
all_dets = array(1e10, dim = c(e, e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
V = matrix(runif(3*100, -10, 10), nrow = 3)
identical(trop_poly_bridge(V), linsp_to_poly(V_ploy))
identical(trop_poly_bridge(V), linsp_to_poly(V))
benchmark(trop_poly_bridge(V), linsp_to_poly(V), replications = 10)
V = matrix(runif(3*10, -10, 10), nrow = 3)
benchmark(trop_poly_bridge(V), linsp_to_poly(V), replications = 10)
identical(trop_poly_bridge(V), linsp_to_poly(V))
linsp_to_poly = function(V){
pcs = nrow(V); e = ncol(V)
all_dets = array(1e10, dim = c(e, e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(mclapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
benchmark(trop_poly_bridge(V), linsp_to_poly(V), replications = 10)
library(parallel)
benchmark(trop_poly_bridge(V), linsp_to_poly(V), replications = 10)
linsp_to_poly = function(V){
pcs = nrow(V); e = ncol(V)
all_dets = array(1e10, dim = c(e, e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
benchmark(trop_poly_bridge(V), linsp_to_poly(V), replications = 10)
linsp_to_poly = function(V){
pcs = nrow(V); e = ncol(V)
all_dets = array(1e10, dim = c(e, e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(mclapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
V = matrix(runif(3*100, -10, 10), nrow = 3)
benchmark(trop_poly_bridge(V), linsp_to_poly(V), replications = 10)
V = matrix(runif(3*100, -10, 10), nrow = 3)
linsp_to_poly(V)
?trop_det2d
choose(100, 3)
choose(100, 2)
source('~/Documents/GitHub/Rtropical/R/linsp_to_poly.R')
source('~/Documents/GitHub/Rtropical/R/tropca.obj.R')
library(Rtropical)
library(RcppAlgos); library(Rtropical); library(rbenchmark); library(Rfast); library(parallel)
cl = makeCluster(2)
x_list = lapply(1: n, function(i){x[i, ]})
n <- 50; e <- 50; s <- 5
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: n, function(i){x[i, ]})
x_list
pcs = 3
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
pc = V
# pc = V
pc <- linsp_to_poly(t(pc))
library(Rtropical)
linsp_to_poly = function(V){
pcs = nrow(V); e = ncol(V)
all_dets = array(1e10, dim = c(e, e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
# pc = V
pc <- linsp_to_poly(t(pc))
pc
# pc = V
pc <- linsp_to_poly(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = pc)
cl = makeCluster(2)
proj <- parLapply(cl, x_list, troproj.poly , tconv = pc)
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
proj
dim(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = pc)
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
dim(do.call("rbind", x_list))
dim(do.call("rbind", proj))
# pc = V
pc <- linsp_to_poly(pc)
pc
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: n, function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
pc = V
pc
# pc = V
pc <- linsp_to_poly(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
troproj.linsp(x, V)
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
temp
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: n, function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- linsp_to_poly(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(V, x_list, cl)
linsp_to_poly(matrix(c(0, 1, 1, 0, -1, 0), nrow = 2, byrow = T))
matrix(c(0, 1, 1, 0, -1, 0), nrow = 2, byrow = T)
identical(trop_poly_bridge(V), linsp_to_poly(V))
trop_poly_bridge <- function(M){
# M = A
m <- nrow(M)
d <- ncol(M)
sigma_set <- RcppAlgos::comboGeneral(d,m-1)
tropoly <- matrix(0,nrow = nrow(sigma_set),ncol = d)
for (i in seq(nrow(sigma_set))) {
sigma <- sigma_set[i,]
for (j in seq(d)) {
tropoly[i,j] <- trop_det(M[,union(sigma,j)])
}
}
return(tropoly)
}
linsp_to_poly = function(V){
pcs = nrow(V); e = ncol(V)
all_dets = array(1e10, dim = c(e, e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
identical(trop_poly_bridge(V), linsp_to_poly(V))
trop_det = function(X){
if (nrow(X) != ncol(X) || is.null(dim(X))){return(1e10)}
tropdet(X)
}
trop_poly_bridge <- function(M){
# M = A
m <- nrow(M)
d <- ncol(M)
sigma_set <- RcppAlgos::comboGeneral(d,m-1)
tropoly <- matrix(0,nrow = nrow(sigma_set),ncol = d)
for (i in seq(nrow(sigma_set))) {
sigma <- sigma_set[i,]
for (j in seq(d)) {
tropoly[i,j] <- trop_det(M[,union(sigma,j)])
}
}
return(tropoly)
}
linsp_to_poly = function(V){
pcs = nrow(V); e = ncol(V)
all_dets = array(1e10, dim = c(e, e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
identical(trop_poly_bridge(V), linsp_to_poly(V))
trop_poly_bridge(V)
linsp_to_poly(V)
A = matrix(c(0, 1, 1,
0, -1, 0), nrow = 2, byrow = T)
A
trop_poly_bridge(A)
linsp_to_poly(A)
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- trop_poly_bridge(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
tropca.obj2(V, x_list, cl)
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- linsp_to_poly(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
tropca.obj2(V, x_list, cl)
linsp_to_poly = function(V){
pcs = nrow(V); e = ncol(V)
all_dets = array(-1e10, dim = c(e, e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- linsp_to_poly(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
tropca_fit <- tropca.linsp2poly(x)
tropca.obj2(V, x_list, cl)
trop_poly_bridge
trop_poly_bridge(A)
trop_det = function(X){
if (nrow(X) != ncol(X) || is.null(dim(X))){return(-1e10)}
tropdet(X)
}
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- trop_poly_bridge(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
tropca.obj2(V, x_list, cl)
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca_fit <- tropca.linsp2poly(x)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rfast)
library(RcppAlgos)
library(parallel)
set.seed(100)
n <- 100; e <- 5; sig2 <- 1
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(sig2, e)))
# load("PCAexample1.RData")
start = Sys.time()
tropca_lp <- tropca.linsp(x)
end = Sys.time()
end - start
summary(prcomp(x))
tropFW(tropca_lp$projection)[[2]]/(tropca_lp$obj + tropFW(tropca_lp$projection)[[2]])
tropca_mcmc <- tropca.poly(x)
tropca_mcmc$pc
tropFW(tropca.poly$projection)[[2]]/(tropca.poly$obj + tropFW(tropca.poly$projection)[[2]])
tropca_mcmc <- tropca.poly(x)
tropFW(tropca_mcmc$projection)[[2]]/(tropca_mcmc$obj + tropFW(tropca_mcmc$projection)[[2]])
tropca_mcmc <- tropca.poly(x)
tropFW(tropca_mcmc$projection)[[2]]/(tropca_mcmc$obj + tropFW(tropca_mcmc$projection)[[2]])
tropca_fit4 <- tropca.linsp2poly(x)
tropFW(tropca_fit4$projection)[[2]]/(tropca_fit4$obj + tropFW(tropca_fit4$projection)[[2]])
x
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: n, function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
tropca.obj2(V, x_list, cl)
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(V, x_list, cl)
tropca_fit <- tropca.linsp2poly(x)
nsample = 1000
ncores = 2
# pcs <- pcs + 1
n <- nrow(x)
cl <- makeCluster(ncores)
x_list <- lapply(seq_len(n), function(i) x[i, ])
tropca_objs <- vector(mode = "numeric", nsample)
samples <- matrix(NA, nrow = nsample, ncol = pcs)
samples[1, ] <- sample(1: n, pcs)
tropca_objs[1] <- tropca.obj2(t(x[samples[1, ], ]), x_list, cl)
x[samples[1, ], ]
tropca.obj
library(Rtropical)
library(Rtropical)
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: n, function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- trop_poly_bridge(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(V, x_list, cl)
trop_det = function(X){
if (nrow(X) != ncol(X) || is.null(dim(X))){return(-1e10)}
tropdet(X)
}
trop_poly_bridge <- function(M){
# M = A
m <- nrow(M)
d <- ncol(M)
sigma_set <- RcppAlgos::comboGeneral(d,m-1)
tropoly <- matrix(0,nrow = nrow(sigma_set),ncol = d)
for (i in seq(nrow(sigma_set))) {
sigma <- sigma_set[i,]
for (j in seq(d)) {
tropoly[i,j] <- trop_det(M[,union(sigma,j)])
}
}
return(tropoly)
}
linsp_to_poly = function(V){
pcs = nrow(V); e = ncol(V)
all_dets = array(-1e10, dim = c(e, e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
identical(trop_poly_bridge(V), linsp_to_poly(V))
A = matrix(c(0, 1, 1,
0, -1, 0), nrow = 2, byrow = T)
trop_poly_bridge(A)
linsp_to_poly(A)
proj_linsp = troproj.linsp(x, x[1: 3])
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
proj_linsp = troproj.linsp(x, x[1: 3, ])
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
rowMaxs(temp, value = T) - rowMins(temp, value = T)
V = A
# V = A
pcs = nrow(V); e = ncol(V)
pcs
e
all_dets = array(-1e10, dim = c(e, e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_dets
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
all_ind
all_dets[rowSort(all_ind)]
all_ind
all_dets
V = A
pcs = nrow(V); e = ncol(V)
all_dets = array(-1e10, dim = rep(e, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
all_dets
rep(e, e)
V = A
pcs = nrow(V); e = ncol(V)
all_dets = array(-1e10, dim = rep(e, pcs))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
linsp_to_poly = function(V){
# V = A
pcs = nrow(V); e = ncol(V)
all_dets = array(-1e10, dim = rep(e, pcs))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
trop_poly_bridge(A)
linsp_to_poly(A)
library(Rtropical)
V = A
all_dets = array(-1e10, dim = rep(e, pcs))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
all_ind
rowSort(all_ind)
all_dets
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- trop_poly_bridge(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: n, function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- trop_poly_bridge(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
proj_linsp = troproj.linsp(x, x[1: 3, ])
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(V, x_list, cl)
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: n, function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- trop_poly_bridge(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
proj_linsp = troproj.linsp(x, x[1: 3, ])
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(x[1: 3, ], x_list, cl)
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- trop_poly_bridge(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
tropca.obj2(x[1: 3, ], x_list, cl)
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- linsp_to_poly(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
tropca.obj2(x[1: 3, ], x_list, cl)
V
pc = V
# pc = V
pc <- linsp_to_poly(pc)
dim(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
dim(proj)
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
dim(temp)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
V
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca_fit <- tropca.linsp2poly(x)
tropca_fit
d0 = tropFW(tropca_fit$projection)
d0[[2]]/(d0[[2]] + tropca_fit$obj)
tropca_fit$obj
d0[[2]]
tropca_fit2 <- tropca.linsp(x)
d0_2 = tropFW(tropca_fit2$projection)
d0_2[[2]]/(d0_2[[2]] + tropca_fit2$obj)
summary(prcomp(x))
