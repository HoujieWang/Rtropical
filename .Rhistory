dta = all_data[c(1: 150, 1001: 1150), ]
trn_ind = sample(1: nrow(dta), 180)
x = as.matrix(dta[trn_ind, -1])
y = dta[trn_ind, 1]
newx = as.matrix(dta[-trn_ind, -1])
newy = dta[-trn_ind, 1]
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
svmmodel2$assignment
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 500, parallel = TRUE, ncores = 4)
start = Sys.time()
cv.svmmodel2 <- cv.tropsvm2(x, y, nassignment = 500, parallel = TRUE, ncores = 4)
end = Sys.time()
end - start
cv.svmpredict <- predict(cv.svmmodel, newx)
sum(cv.svmpredict == newy)/length(newy)
cv.svmpredict2 <- pred2.tropsvm(cv.svmmodel2, newx)
sum(cv.svmpredict2 == newy)/length(newy)
svmmodel
svmmodel2
classes <- unique(y)
reorder_ind <- c(which(y == classes[1]), which(y == classes[2]))
label <- y[reorder_ind]
data <- x[reorder_ind, ]
n1 <- sum(label == classes[1])
n2 <- sum(label == classes[2])
n <- n1 + n2
if (auto.assignment){
assignment <- assignment_finder(data[1: n1, ], data[-c(1: n1), ])[1, ]
}
assignment <- assignment_finder(data[1: n1, ], data[-c(1: n1), ])[1, ]
assignment
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel
x
y
classes <- unique(y)
reorder_ind <- c(which(y == classes[1]), which(y == classes[2]))
label <- y[reorder_ind]
data <- x[reorder_ind, ]
n1 <- sum(label == classes[1])
n2 <- sum(label == classes[2])
n <- n1 + n2
assignment_finder(x[1: n1, ], x[-c(1: n1), ])[1, ]
library(Rtropical)
tropsvm
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
n <- 50; N <- 50; e <- 3; s <- 10
x <- rbind(rmvnorm(n, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(n, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
y <- as.factor(rep(c(1, 2), each = n))
newx <- rbind(rmvnorm(N, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(N, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
newy <- as.factor(rep(c(1, 2), each = N))
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
n <- 50; N <- 50; e <- 500; s <- 10
x <- rbind(rmvnorm(n, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(n, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
y <- as.factor(rep(c(1, 2), each = n))
newx <- rbind(rmvnorm(N, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(N, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
newy <- as.factor(rep(c(1, 2), each = N))
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
svmmodel$assignment
svmmodel2$assignment
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 100, parallel = TRUE, ncores = 4)
start = Sys.time()
cv.svmmodel2 <- cv.tropsvm2(x, y, nassignment = 100, parallel = TRUE, ncores = 4)
end = Sys.time()
end - start
cv.svmpredict <- predict(cv.svmmodel, newx)
sum(cv.svmpredict == newy)/length(newy)
cv.svmpredict2 <- pred2.tropsvm(cv.svmmodel2, newx)
sum(cv.svmpredict2 == newy)/length(newy)
install.packages("raster")
library(raster)
r <- raster(ncol=10, nrow=10)
r
values(r)
ncell(r)
values(r) <- 1:ncell(r)
r$layer$layer$layer
s <- r + 10
s <- sqrt(s)
s <- s * r + 5
r[] <- runif(ncell(r))
r <- round(r)
r <- r == 1
n <- 100; N <- 100; e <- 500; s <- 10
x <- rbind(rmvnorm(n, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(n, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
y <- as.factor(rep(c(1, 2), each = n))
newx <- rbind(rmvnorm(N, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(N, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
newy <- as.factor(rep(c(1, 2), each = N))
# P = read.tree("RudyTree2A.txt"); Q = read.tree("RudyTree2B.txt")
# all_data = matrix(unlist(lapply(append(P,Q),
#        function(x){cophenetic.phylo(x)[lower.tri(cophenetic.phylo(x))]})), nrow = 2000 , byrow = T)
# labels = as.factor(rep(c(1, 2), each = 1000))
# all_data = cbind.data.frame(class = labels, all_data)
#
# dta = all_data[c(1: 150, 1001: 1150), ]
# trn_ind = sample(1: nrow(dta), 180)
# x = as.matrix(dta[trn_ind, -1])
# y = dta[trn_ind, 1]
#
# newx = as.matrix(dta[-trn_ind, -1])
# newy = dta[-trn_ind, 1]
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
n <- 100; N <- 100; e <- 500; s <- 10
x <- rbind(rmvnorm(n, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(n, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
y <- as.factor(rep(c(1, 2), each = n))
newx <- rbind(rmvnorm(N, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(N, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
newy <- as.factor(rep(c(1, 2), each = N))
# P = read.tree("RudyTree2A.txt"); Q = read.tree("RudyTree2B.txt")
# all_data = matrix(unlist(lapply(append(P,Q),
#        function(x){cophenetic.phylo(x)[lower.tri(cophenetic.phylo(x))]})), nrow = 2000 , byrow = T)
# labels = as.factor(rep(c(1, 2), each = 1000))
# all_data = cbind.data.frame(class = labels, all_data)
#
# dta = all_data[c(1: 150, 1001: 1150), ]
# trn_ind = sample(1: nrow(dta), 180)
# x = as.matrix(dta[trn_ind, -1])
# y = dta[trn_ind, 1]
#
# newx = as.matrix(dta[-trn_ind, -1])
# newy = dta[-trn_ind, 1]
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
n <- 100; N <- 100; e <- 500; s <- 10
x <- rbind(rmvnorm(n, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(n, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
y <- as.factor(rep(c(1, 2), each = n))
newx <- rbind(rmvnorm(N, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(N, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
newy <- as.factor(rep(c(1, 2), each = N))
# P = read.tree("RudyTree2A.txt"); Q = read.tree("RudyTree2B.txt")
# all_data = matrix(unlist(lapply(append(P,Q),
#        function(x){cophenetic.phylo(x)[lower.tri(cophenetic.phylo(x))]})), nrow = 2000 , byrow = T)
# labels = as.factor(rep(c(1, 2), each = 1000))
# all_data = cbind.data.frame(class = labels, all_data)
#
# dta = all_data[c(1: 150, 1001: 1150), ]
# trn_ind = sample(1: nrow(dta), 180)
# x = as.matrix(dta[trn_ind, -1])
# y = dta[trn_ind, 1]
#
# newx = as.matrix(dta[-trn_ind, -1])
# newy = dta[-trn_ind, 1]
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
n <- 100; N <- 100; e <- 500; s <- 10
x <- rbind(rmvnorm(n, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(n, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
y <- as.factor(rep(c(1, 2), each = n))
newx <- rbind(rmvnorm(N, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(N, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
newy <- as.factor(rep(c(1, 2), each = N))
# P = read.tree("RudyTree2A.txt"); Q = read.tree("RudyTree2B.txt")
# all_data = matrix(unlist(lapply(append(P,Q),
#        function(x){cophenetic.phylo(x)[lower.tri(cophenetic.phylo(x))]})), nrow = 2000 , byrow = T)
# labels = as.factor(rep(c(1, 2), each = 1000))
# all_data = cbind.data.frame(class = labels, all_data)
#
# dta = all_data[c(1: 150, 1001: 1150), ]
# trn_ind = sample(1: nrow(dta), 180)
# x = as.matrix(dta[trn_ind, -1])
# y = dta[trn_ind, 1]
#
# newx = as.matrix(dta[-trn_ind, -1])
# newy = dta[-trn_ind, 1]
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
n <- 100; N <- 100; e <- 500; s <- 10
x <- rbind(rmvnorm(n, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(n, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
y <- as.factor(rep(c(1, 2), each = n))
newx <- rbind(rmvnorm(N, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(N, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
newy <- as.factor(rep(c(1, 2), each = N))
# P = read.tree("RudyTree2A.txt"); Q = read.tree("RudyTree2B.txt")
# all_data = matrix(unlist(lapply(append(P,Q),
#        function(x){cophenetic.phylo(x)[lower.tri(cophenetic.phylo(x))]})), nrow = 2000 , byrow = T)
# labels = as.factor(rep(c(1, 2), each = 1000))
# all_data = cbind.data.frame(class = labels, all_data)
#
# dta = all_data[c(1: 150, 1001: 1150), ]
# trn_ind = sample(1: nrow(dta), 180)
# x = as.matrix(dta[trn_ind, -1])
# y = dta[trn_ind, 1]
#
# newx = as.matrix(dta[-trn_ind, -1])
# newy = dta[-trn_ind, 1]
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
n <- 100; N <- 100; e <- 5000; s <- 10
x <- rbind(rmvnorm(n, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(n, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
y <- as.factor(rep(c(1, 2), each = n))
newx <- rbind(rmvnorm(N, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(N, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
newy <- as.factor(rep(c(1, 2), each = N))
# P = read.tree("RudyTree2A.txt"); Q = read.tree("RudyTree2B.txt")
# all_data = matrix(unlist(lapply(append(P,Q),
#        function(x){cophenetic.phylo(x)[lower.tri(cophenetic.phylo(x))]})), nrow = 2000 , byrow = T)
# labels = as.factor(rep(c(1, 2), each = 1000))
# all_data = cbind.data.frame(class = labels, all_data)
#
# dta = all_data[c(1: 150, 1001: 1150), ]
# trn_ind = sample(1: nrow(dta), 180)
# x = as.matrix(dta[trn_ind, -1])
# y = dta[trn_ind, 1]
#
# newx = as.matrix(dta[-trn_ind, -1])
# newy = dta[-trn_ind, 1]
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
n <- 100; N <- 100; e <- 500; s <- 10
x <- rbind(rmvnorm(n, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(n, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
y <- as.factor(rep(c(1, 2), each = n))
newx <- rbind(rmvnorm(N, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(N, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
newy <- as.factor(rep(c(1, 2), each = N))
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
n <- 50; N <- 100; e <- 500; s <- 10
x <- rbind(rmvnorm(n, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(n, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
y <- as.factor(rep(c(1, 2), each = n))
newx <- rbind(rmvnorm(N, mu = c(rep(0, e-2), 5, -5), sigma = diag(s, e)),
rmvnorm(N, mu = c(rep(0, e-2), -5, 5), sigma = diag(s, e)))
newy <- as.factor(rep(c(1, 2), each = N))
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
P = read.tree("RudyTree10A.txt"); Q = read.tree("RudyTree10B.txt")
all_data = matrix(unlist(lapply(append(P,Q),
function(x){cophenetic.phylo(x)[lower.tri(cophenetic.phylo(x))]})), nrow = 2000 , byrow = T)
labels = as.factor(rep(c(1, 2), each = 1000))
all_data = cbind.data.frame(class = labels, all_data)
dta = all_data[c(1: 150, 1001: 1150), ]
trn_ind = sample(1: nrow(dta), 180)
x = as.matrix(dta[trn_ind, -1])
y = dta[trn_ind, 1]
newx = as.matrix(dta[-trn_ind, -1])
newy = dta[-trn_ind, 1]
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 100, parallel = TRUE, ncores = 4)
start = Sys.time()
cv.svmmodel2 <- cv.tropsvm2(x, y, nassignment = 100, parallel = TRUE, ncores = 4)
end = Sys.time()
end - start
cv.svmpredict <- predict(cv.svmmodel, newx)
sum(cv.svmpredict == newy)/length(newy)
cv.svmpredict2 <- pred2.tropsvm(cv.svmmodel2, newx)
sum(cv.svmpredict2 == newy)/length(newy)
P = read.tree("Tree0.2A.txt"); Q = read.tree("Tree0.2B.txt")
all_data = matrix(unlist(lapply(append(P,Q),
function(x){cophenetic.phylo(x)[lower.tri(cophenetic.phylo(x))]})), nrow = 300 , byrow = T)
labels = as.factor(rep(c(1, 2), each = 150))
all_data = cbind.data.frame(class = labels, all_data)
# dta = all_data[c(1: 150, 1001: 1150), ]
dta = all_data
trn_ind = sample(1: nrow(dta), 170)
x = as.matrix(dta[trn_ind, -1])
y = dta[trn_ind, 1]
newx = as.matrix(dta[-trn_ind, -1])
newy = dta[-trn_ind, 1]
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmpredict <- predict(svmmodel, newx)
sum(svmpredict == newy)/length(newy)
svmmodel2 <- tropsvm2(x, y, auto.assignment = TRUE)
svmpredict2 <- predict(svmmodel2, newx)
sum(svmpredict2 == newy)/length(newy)
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 500, parallel = TRUE, ncores = 4)
start = Sys.time()
cv.svmmodel2 <- cv.tropsvm2(x, y, nassignment = 500, parallel = TRUE, ncores = 4)
end = Sys.time()
end - start
cv.svmpredict <- predict(cv.svmmodel, newx)
sum(cv.svmpredict == newy)/length(newy)
cv.svmpredict2 <- pred2.tropsvm(cv.svmmodel2, newx)
sum(cv.svmpredict2 == newy)/length(newy)
cv.svmmodel2
cv.svmmodel
cv.svmmodel2
r <- raster(ncol=10, nrow=10)
values(r) <- 1:ncell(r)
s <- r + 10
s <- sqrt(s)
s <- s * r + 5
r[] <- runif(ncell(r))
r <- round(r)
r <- r == 1
r
library(SUMMER)
library(classInt)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(rgdal)
library(scales)
library(INLA)
INLA:::inla.dynload.workaround()
library(survey)
library(ggplot2)
library(gridExtra)
library(parallel)
library(spdep)
library(readstata13)
library(geosphere)
library(mapproj)
# Set working directory to the Main folder.
# This needs to be replaced by the directory in each local system.
home.dir <- '/Users/wanghoujie/Downloads/Research/Spatial/DHS-SAR-local/'
# Set directories
data.dir <- paste0(home.dir,'/Data/',sep='')
res.dir <- paste0(home.dir,'/Results/',sep='')
setwd(data.dir)
################################################################
#########   set parameters
################################################################
#### Files info ####
country <- "Zambia"
gadm.abbrev <- "ZMB"
poly.path <- paste0(country,"/shapeFiles_gadm")
# dhsStata, which contains survey data
dhsStata.file<-"ZMBR71DT/ZMBR71FL.dta"
# survey GPS
dhsFlat.file<-'ZMGE71FL'
#### Analysis info ####
beg.year = 2010
end.year = 2018
type.st =  4
survey_year<-2018
################################################################
#########   load polygon files
################################################################
poly.layer.adm0 <- paste('gadm36', gadm.abbrev,
'0', sep = "_")
poly.layer.adm1 <- paste('gadm36', gadm.abbrev,
'1', sep = "_")
poly.layer.adm2 <- paste('gadm36', gadm.abbrev,
'2', sep = "_")
poly.adm0 <- readOGR(dsn = poly.path,encoding = "UTF-8", use_iconv = TRUE,
layer = as.character(poly.layer.adm0))
# use encoding to read special characters
poly.adm1 <- readOGR(dsn = poly.path,encoding = "UTF-8", use_iconv = TRUE,
layer = as.character(poly.layer.adm1))
if(sum(grepl(paste('gadm36', gadm.abbrev,
'2', sep = "_"), list.files(poly.path))) != 0){
poly.adm2 <- readOGR(dsn = poly.path,encoding = "UTF-8", use_iconv = TRUE,
layer = as.character(poly.layer.adm2))}
if(exists("poly.adm2")){
proj4string(poly.adm0) <- proj4string(poly.adm1)  <- proj4string(poly.adm2)
}else{
proj4string(poly.adm0) <- proj4string(poly.adm1)
}
################################################################
#########   Create Adj Matrix
################################################################
if(exists("poly.adm1")){
admin1.mat <- poly2nb(SpatialPolygons(poly.adm1@polygons))
admin1.mat <- nb2mat(admin1.mat, zero.policy = TRUE)
colnames(admin1.mat) <- rownames(admin1.mat) <- paste0("admin1_", 1:dim(admin1.mat)[1])
admin1.names <- data.frame(GADM = poly.adm1@data$NAME_1,
Internal = rownames(admin1.mat))
}else{
message("There is no Admin1 polygon file.")
}
if(exists("poly.adm2")){
admin2.mat <- poly2nb(SpatialPolygons(poly.adm2@polygons))
admin2.mat <- nb2mat(admin2.mat, zero.policy = TRUE)
colnames(admin2.mat) <- rownames(admin2.mat) <- paste0("admin2_", 1:dim(admin2.mat)[1])
admin2.names <- data.frame(GADM = poly.adm2@data$NAME_2,
Internal = rownames(admin2.mat))
}else{
message("There is no Admin2 polygon file.")
}
admin1.mat
poly.adm1
poly.adm1@polygons
SpatialPolygons(poly.adm1@polygons)
?poly2nb
length(SpatialPolygons(poly.adm1@polygons))
admin1.mat
poly.layer.adm0
setwd("~/Documents/GitHub/Rtropical")
n <- 50; N <- 100; e <- 500; s <- 10
sessionInfo()
svmmodel <- tropsvm(x, y, auto.assignment = TRUE)
svmmodel
library(dplyr)
