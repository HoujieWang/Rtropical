lines(density(logistic(all_theta_jeffrey), from = 0, to = 1), col = "green")
legend("topleft", legend = c("Flat", "Jeffrey", "Gelman"), col = c("black", "red", "green"), lty = rep(1, 3))
plot(density(logit(all_theta_flat), from = -20, to = 20), col = "black", main = "Density Plot", xlab = expression(alpha), ylim = c(0, 12))
lines(density(logit(all_theta_jeffrey), from = -20, to = 20), col = "red")
lines(density(all_alpha, from = -20, to = 20), col = "green")
legend("topleft", legend = c("Flat", "Jeffrey", "Gelman"), col = c("black", "red", "green"), lty = rep(1, 3))
set.seed(587)
S = 1000000
all_theta_flat = runif(S)
all_theta_jeffrey = rbeta(S, 0.5, 0.5)
all_alpha = rcauchy(S, 0, 10)
par(mfrow = c(1, 2))
plot(density(all_theta_flat, from = 0, to = 1), col = "black", main = "Density Plot", xlab = expression(theta), ylim = c(0, 12))
lines(density(all_theta_jeffrey, from = 0, to = 1), col = "red")
lines(density(logistic(all_theta_jeffrey), from = 0, to = 1), col = "green")
legend("topleft", legend = c("Flat", "Jeffrey", "Gelman"), col = c("black", "red", "green"), lty = rep(1, 3))
plot(density(logit(all_theta_flat), from = -20, to = 20), col = "black", main = "Density Plot", xlab = expression(alpha), ylim = c(0, 2))
lines(density(logit(all_theta_jeffrey), from = -20, to = 20), col = "red")
lines(density(all_alpha, from = -20, to = 20), col = "green")
legend("topleft", legend = c("Flat", "Jeffrey", "Gelman"), col = c("black", "red", "green"), lty = rep(1, 3))
set.seed(587)
S = 1000000
all_theta_flat = runif(S)
all_theta_jeffrey = rbeta(S, 0.5, 0.5)
all_alpha = rcauchy(S, 0, 10)
par(mfrow = c(1, 2))
plot(density(all_theta_flat, from = 0, to = 1), col = "black", main = "Density Plot", xlab = expression(theta), ylim = c(0, 12))
lines(density(all_theta_jeffrey, from = 0, to = 1), col = "red")
lines(density(logistic(all_theta_jeffrey), from = 0, to = 1), col = "green")
plot(density(logit(all_theta_flat), from = -20, to = 20), col = "black", main = "Density Plot", xlab = expression(alpha), ylim = c(0, 2))
lines(density(logit(all_theta_jeffrey), from = -20, to = 20), col = "red")
lines(density(all_alpha, from = -20, to = 20), col = "green")
legend("topleft", legend = c("Flat", "Jeffrey", "Gelman"), col = c("black", "red", "green"), lty = rep(1, 3))
set.seed(587)
S = 1000000
all_theta_flat = runif(S)
all_theta_jeffrey = rbeta(S, 0.5, 0.5)
all_alpha = rcauchy(S, 0, 10)
par(mfrow = c(1, 2))
plot(density(all_theta_flat, from = 0, to = 1), col = "black", main = "Density Plot", xlab = expression(theta), ylim = c(0, 12))
lines(density(all_theta_jeffrey, from = 0, to = 1), col = "red")
lines(density(logistic(all_theta_jeffrey), from = 0, to = 1), col = "green")
plot(density(logit(all_theta_flat), from = -20, to = 20), col = "black", main = "Density Plot", xlab = expression(alpha), ylim = c(0, 2))
lines(density(logit(all_theta_jeffrey), from = -20, to = 20), col = "red")
lines(density(all_alpha, from = -20, to = 20), col = "green")
legend("topleft", legend = c("Flat", "Jeffrey", "Gelman"), col = c("black", "red", "green"), lty = rep(1, 3))
?rt
?rcauchy
set.seed(587)
S = 1000000
all_theta_flat = runif(S)
all_theta_jeffrey = rbeta(S, 0.5, 0.5)
all_alpha = rcauchy(S, 0, 10)
par(mfrow = c(1, 2))
plot(density(all_theta_flat, from = 0, to = 1), col = "black", main = "Density Plot", xlab = expression(theta), ylim = c(0, 12))
lines(density(all_theta_jeffrey, from = 0, to = 1), col = "red")
lines(density(logistic(all_theta_jeffrey), from = 0, to = 1), col = "green")
plot(density(logit(all_theta_flat), from = -20, to = 20), col = "black", main = "Density Plot", xlab = expression(alpha), ylim = c(0, 2))
lines(density(logit(all_theta_jeffrey), from = -20, to = 20), col = "red")
lines(density(all_alpha, from = -20, to = 20), col = "green")
legend("topleft", legend = c("Flat", "Jeffrey", "Gelman"), col = c("black", "red", "green"), lty = rep(1, 3))
quantile(all_theta_flat)
quantile(all_theta_jeffrey)
quantile(logistic(all_theta_jeffrey))
IQR(all_theta_flat)
IQR(all_theta_jeffrey)
IQR(logistic(all_theta_jeffrey))
?logistic
0.99*0.0001/(0.99*0.0001+0.01*0.9999)
0.99*0.9999/(0.99*0.9999+0.01*0.0001)
0.01*0.9999/(0.01*0.9999+0.99*0.0001)
1-0.0098
0.01*0.9902/(0.01*0.9902+0.99*0.0098)
tropFW2 <- function(x){
nn <- nrow(x)
e <- ncol(x)
jk <- comboGeneral(1: e, 2)
combn_size <- nrow(jk)
obj <- c(rep(1, nn), rep(0, e))
conY <- matrix(0, nrow = nn*combn_size, ncol = e)
all_v <- x[, jk[, 2]] - x[, jk[, 1]]
conY[cbind(1: (nn*combn_size), rep(jk[, 1], each = nrow(x)))] <- -1
conY[cbind(1: (nn*combn_size), rep(jk[, 2], each = nrow(x)))] <- 1
conD <- matrix(0, nrow = 2*nn*combn_size, ncol = nn)
conD[cbind(1: (2*nn*combn_size), 1: nn)] <- -1
con <- cbind(conD, rbind(conY, -conY))
rhs <- c(matrix(all_v), -matrix(all_v))
lprec <- make.lp(nrow(con), nn+e)
for (i in 1: ncol(con)){set.column(lprec, i, -con[, i])}
set.constr.type(lprec, rep(">=", (2*nn*combn_size)))
set.rhs(lprec, -rhs)
set.objfn(lprec, c(rep(1, nn), rep(0, e)))
solve.lpExtPtr(lprec)
sols = get.variables(lprec)
list("fw" = sols[-c(1: nn)], "distsum" = sum(sols[1: nn]))
}
centroid_finder = function(tconv){
# tconv = t(data[1: n1, ])
e = nrow(tconv); s = ncol(tconv)
f.obj = c(rep(0, e), rep(1, s))
jk = combn(1:e, 2)
f.conA = matrix(0, nrow = s*choose(e, 2), ncol = e)
for (i in 1: choose(e, 2)){
f.conA[(1+(i-1)*s): (i*s), rep(jk[1, i], 2)] = 1
f.conA[(1+(i-1)*s): (i*s), rep(jk[2, i], 2)] = -1
}
f.conA = cbind(f.conA, do.call(rbind, replicate(choose(e, 2), diag(1, nrow = s, ncol = s), simplify = F)))
f.conB = f.conA
f.conB[,(e+1):(e+s)] = -f.conB[,(e+1):(e+s)]
f.con = rbind(f.conA, f.conB)
f.rhs = matrix(apply(jk, 2, function(x){tconv[x[1], ] - tconv[x[2], ]}))
f.rhs = rep(f.rhs, 2)
f.dir = rep(c(">=", "<="), each = s*choose(e, 2))
sol = lp("min", f.obj, f.con, f.dir, f.rhs)
return(list("centroid" = sol$solution[1: e], "obj" = sol$objval))
}
x = matrix(c(6, -8, -1,
4, -5, 1), nrow = 2, byrow = T)
tropFW(x)
tropFW2(x)
centroid_finder(x)
centroid_finder(t(x))
library(Rtropical)
library(RcppAlgos); library(Rtropical); library(rbenchmark); library(Rfast); library(parallel)
trop_det = function(X){
if (nrow(X) != ncol(X) || is.null(dim(X))){return(-1e10)}
tropdet(X)
}
trop_poly_bridge <- function(M){
# M = A
m <- nrow(M)
d <- ncol(M)
sigma_set <- RcppAlgos::comboGeneral(d,m-1)
tropoly <- matrix(0,nrow = nrow(sigma_set),ncol = d)
for (i in seq(nrow(sigma_set))) {
sigma <- sigma_set[i,]
for (j in seq(d)) {
tropoly[i,j] <- trop_det(M[,union(sigma,j)])
}
}
return(tropoly)
}
linsp_to_poly = function(V){
# V = A
pcs = nrow(V); e = ncol(V)
all_dets = array(-1e10, dim = rep(e, pcs))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
identical(trop_poly_bridge(V), linsp_to_poly(V))
A = matrix(c(0, 1, 1,
0, -1, 0), nrow = 2, byrow = T)
trop_poly_bridge(A)
linsp_to_poly(A)
benchmark(trop_poly_bridge(V), linsp_to_poly(V), replications = 10)
library(RcppAlgos); library(Rtropical); library(rbenchmark); library(Rfast); library(parallel)
trop_det = function(X){
if (nrow(X) != ncol(X) || is.null(dim(X))){return(-1e10)}
tropdet(X)
}
trop_poly_bridge <- function(M){
# M = A
m <- nrow(M)
d <- ncol(M)
sigma_set <- RcppAlgos::comboGeneral(d,m-1)
tropoly <- matrix(0,nrow = nrow(sigma_set),ncol = d)
for (i in seq(nrow(sigma_set))) {
sigma <- sigma_set[i,]
for (j in seq(d)) {
tropoly[i,j] <- trop_det(M[,union(sigma,j)])
}
}
return(tropoly)
}
linsp_to_poly = function(V){
# V = A
pcs = nrow(V); e = ncol(V)
all_dets = array(-1e10, dim = rep(e, pcs))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
all_combns2 = comboGeneral(1: e, pcs-1)
all_ind = cbind(rep(1: e, each = nrow(all_combns2)), all_combns2[rep(seq(nrow(all_combns2)), e), ])
matrix(all_dets[rowSort(all_ind)], ncol = e)
}
identical(trop_poly_bridge(V), linsp_to_poly(V))
A = matrix(c(0, 1, 1,
0, -1, 0), nrow = 2, byrow = T)
trop_poly_bridge(A)
linsp_to_poly(A)
benchmark(trop_poly_bridge(A), linsp_to_poly(A), replications = 10)
linsp_to_poly(A)
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: n, function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
linsp_to_poly(V)
?troproj.poly
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: n, function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- linsp_to_poly(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(V, x_list, cl)
tropca.obj2(V, x_list[[1]], cl)
tropca.obj2(V, x_list1], cl)
tropca.obj2(V, x_list[1], cl)
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
proj_linsp = troproj.linsp(x[1, ], V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
proj_linsp = troproj.linsp(x[1, ], V)
temp = x[1, ] - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
proj_linsp = troproj.linsp(x[1, ], V)
temp = x[1, ] - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(V, x_list[1], cl)
proj_linsp = troproj.linsp(x[2, ], V)
temp = x[2, ] - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(V, x_list[2], cl)
proj_linsp = troproj.linsp(x[5, ], V)
temp = x[5, ] - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(V, x_list[2], cl)
proj_linsp = troproj.linsp(x[5, ], V)
temp = x[5, ] - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(V, x_list[5], cl)
tropca.obj2(V, x_list, cl)
tropca.obj2(V, x_list, cl)
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
length(x_list)
dim(x)
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: nrow(x), function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
tropca.obj2 <- function(pc, x_list, cl){
# pc = V
pc <- linsp_to_poly(pc)
proj <- parLapply(cl, x_list, troproj.poly , tconv = t(pc))
temp <- do.call("rbind", x_list) - do.call("rbind", proj)
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
}
proj_linsp = troproj.linsp(x, V)
temp = x - proj_linsp
sum(rowMaxs(temp, value = T) - rowMins(temp, value = T))
tropca.obj2(V, x_list, cl)
library(Rtropical)
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
tropca_fit <- tropca.linsp2poly(x)
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
set.seed(100)
tropca_fit <- tropca.linsp2poly(x)
set.seed(100)
tropca_fit2 <- tropca.linsp(x)
tropca_fit
tropca_fit2
library(Rtropical)
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: nrow(x), function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
tropca.obj(V, x_list, cl)
tropca.obj2(V, x_list, cl)
tropca.obj
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: nrow(x), function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
tropca.obj(t(V), x_list, cl)
tropca.obj2(V, x_list, cl)
tropca.obj(t(V), x_list[1], cl)
tropca.obj2(V, x_list[1], cl)
tropca.obj(t(V), x_list[2], cl)
tropca.obj2(V, x_list[2], cl)
res = matrix(NA, nrow = 100, ncol = 2)
for (i in 1: 100){
res[i, ] = c(tropca.obj(t(V), x_list[i], cl), tropca.obj2(V, x_list[i], cl))
}
res
abs(which(res[, 1] - res[, 2])) > 1e-5
which(abs(res[, 1] - res[, 2])> 1e-5)
res[which(abs(res[, 1] - res[, 2])> 1e-5), ]
tropca.obj
all_projs = troproj.linsp(x, V)
troproj.poly
proj_linsp = troproj.linsp(x, V)
proj_linsp2poly = do.call("rbind", lapply(x_list, troproj.poly, t(V)))
proj_linsp
proj_linsp2poly
identical(proj_linsp, proj_linsp2poly)
which(abs(proj_linsp - proj_linsp2poly) > 1e-5, arr.ind = TRUE)
dim(proj_linsp)
dim(proj_linsp2poly)
proj_linsp[, 1]
proj_linsp2poly[, 1]
linsp_to_poly(x)
dim(x)
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
linsp_to_poly(x)
dim(x)
x
pcs
V
linsp_to_poly(x)
e
proj_linsp = troproj.linsp(x, V)
linsp_to_poly(x)
proj_linsp2poly = do.call("rbind", lapply(x_list, troproj.poly, t(linsp_to_poly(V)))
proj_linsp2poly = do.call("rbind", lapply(x_list, troproj.poly, t(linsp_to_poly(V))))
proj_linsp2poly = do.call("rbind", lapply(x_list, troproj.poly, t(linsp_to_poly(V))))
proj_linsp
proj_linsp2poly
proj_linsp[1, ]
proj_linsp2poly[1, ]
tropca.obj2
tropca.obj2(V, x_list, cl)
sum(rowMaxs(x - proj_linsp, value = T) - rowMins(x - proj_linsp, value = T))
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: nrow(x), function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
proj_linsp = troproj.linsp(x, V)
sum(rowMaxs(x - proj_linsp, value = T) - rowMins(x - proj_linsp, value = T))
tropca.obj2(V, x_list, cl)
proj_linsp2poly = do.call("rbind", lapply(x_list, troproj.poly, t(linsp_to_poly(V))))
sum(rowMaxs(x - proj_linsp2poly, value = T) - rowMins(x - proj_linsp2poly, value = T))
identical(proj_linsp2poly, proj_linsp)
n <- 50; e <- 10; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: nrow(x), function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
proj_linsp = troproj.linsp(x, V)
sum(rowMaxs(x - proj_linsp, value = T) - rowMins(x - proj_linsp, value = T))
tropca.obj2(V, x_list, cl)
proj_linsp2poly = do.call("rbind", lapply(x_list, troproj.poly, t(linsp_to_poly(V))))
sum(rowMaxs(x - proj_linsp2poly, value = T) - rowMins(x - proj_linsp2poly, value = T))
identical(proj_linsp, proj_linsp2poly)
tropca.linsp2poly2 = function(x, pcs = 2, iteration = list(), ncores = 2){
con <- list(
exhaust = FALSE,
niter = 100
)
con[names(iteration)] <- iteration
exhaust <- con$exhaust
niter <- con$niter
pcs <- pcs + 1
all_choices <- comboGeneral(nrow(x), pcs)
if (exhaust){
all_choices <- lapply(1: nrow(all_choices), function(i) all_choices[i, ])
} else{
all_choices <- lapply(sample(1: nrow(all_choices), niter, replace = F), function(i) all_choices[i, ])
}
cl <- makeCluster(ncores)
all_objs <- unlist(parLapply(cl, all_choices, function(ind){
V <- x[ind, ]
proj = do.call("rbind", lapply(x_list, troproj.poly, t(linsp_to_poly(V))))
temp <- x - proj
sum(rowMaxs(temp, T) - rowMins(temp, T))
}))
stopCluster(cl)
best_choice <- all_choices[[which.min(all_objs)]]
pc <- x[best_choice, ]
rownames(pc) <- paste("pc", 1: pcs, sep = "")
proj_points <- do.call("rbind", lapply(x_list, troproj.poly, t(linsp_to_poly(pc))))
tropca.out <- list("pc" = pc,
"obj" = min(all_objs),
"projection" = proj_points,
"type" = "linear space")
class(tropca.out) <- "tropca"
tropca.out
}
x
tropca_fit = tropca.linsp2poly2(x)
library(Rtropical)
start = Sys.time()
tropca_fit = tropca.linsp2poly2(x)
end = Sys.time()
end - start
rm(list = ls())
library(RcppAlgos); library(Rtropical); library(rbenchmark); library(Rfast); library(parallel)
n <- 50; e <- 10; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
x_list = lapply(1: nrow(x), function(i){x[i, ]})
V = matrix(runif(pcs*e, -10, 10), nrow = 3)
proj_linsp = troproj.linsp(x, V)
sum(rowMaxs(x - proj_linsp, value = T) - rowMins(x - proj_linsp, value = T))
tropca.obj2(V, x_list, cl)
proj_linsp2poly = do.call("rbind", lapply(x_list, troproj.poly, t(linsp_to_poly(V))))
sum(rowMaxs(x - proj_linsp2poly, value = T) - rowMins(x - proj_linsp2poly, value = T))
identical(proj_linsp, proj_linsp2poly)
start = Sys.time()
tropca_fit = tropca.linsp2poly(x)
end = Sys.time()
end - start
library(Rtropical)
start = Sys.time()
tropca_fit = tropca.linsp2poly(x)
end = Sys.time()
end - start
start = Sys.time()
tropca_fit2 = tropca.linsp(x)
end = Sys.time()
end - start
x_list <- lapply(seq_len(n), function(i) x[i, ])
pcs = 2
pcs <- pcs + 1
all_choices <- comboGeneral(nrow(x), pcs)
exhaust = FALSE
if (exhaust){
all_choices <- lapply(1: nrow(all_choices), function(i) all_choices[i, ])
} else{
all_choices <- lapply(sample(1: nrow(all_choices), niter, replace = F), function(i) all_choices[i, ])
}
pcs = 2
exhaust = FALSE
niter = 100
if (exhaust){
all_choices <- lapply(1: nrow(all_choices), function(i) all_choices[i, ])
} else{
all_choices <- lapply(sample(1: nrow(all_choices), niter, replace = F), function(i) all_choices[i, ])
}
cl <- makeCluster(ncores)
all_choices
ind = all_choices[[1]]
V <- x[ind, ]
proj = do.call("rbind", lapply(x_list, troproj.poly, t(linsp_to_poly(V))))
library(Rtropical)
proj = do.call("rbind", lapply(x_list, troproj.poly, t(linsp_to_poly(V))))
temp <- x - proj
dim(proj)
dim(x)
library(Rtropical)
start = Sys.time()
tropca_fit = tropca.linsp2poly(x)
end = Sys.time()
end - start
start = Sys.time()
tropca_fit2 = tropca.linsp(x)
end = Sys.time()
end - start
n <- 50; e <- 50; s <- 5; pcs = 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(s, e)),
rmvnorm(n, mu = c(-5, 5, rep(0, e-2)), sigma = diag(s, e)))
cl = makeCluster(2)
start = Sys.time()
tropca_fit = tropca.linsp2poly(x)
end = Sys.time()
end - start
start = Sys.time()
tropca_fit2 = tropca.linsp(x)
end = Sys.time()
end - start
tropca_fit
set.seed(100)
start = Sys.time()
tropca_fit = tropca.linsp2poly(x)
end = Sys.time()
end - start
set.seed(100)
start = Sys.time()
tropca_fit2 = tropca.linsp(x)
end = Sys.time()
end - start
tropca_fit
identical(tropca_fit, tropca_fit2)
library(Rtropical)
