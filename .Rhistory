summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
beta = c(3.3, -1, 1, -2.8, 1.2, 1.5, 1.2, 0.2, -1.3, 1.85)
pressure_idx = X %*% beta + rnorm(n, 0, 1)
pressure_idx = round(pressure_idx, digits = 2)
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
pressure_idx = X %*% beta + rnorm(n, 0, 2)
pressure_idx = round(pressure_idx, digits = 2)
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
pressure_idx = X %*% beta + rnorm(n, 0, 4)
pressure_idx = round(pressure_idx, digits = 2)
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
t.test(pressure_idx~gender, data)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
max(pressure_idx)
pressure_idx = X %*% beta + runif(n, -2, 2)
pressure_idx = round(pressure_idx, digits = 2)
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
pressure_idx = X %*% beta + runif(n, -3, 4)
pressure_idx = round(pressure_idx, digits = 2)
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
shapiro.test(pressure_idx)
shapiro.test(pressure_idx[sample(1: n, 5000, replace = F)])
hist(pressure_idx)
pressure_idx = X %*% beta + rnorm(n, 0, 1)
shapiro.test(pressure_idx[sample(1: n, 5000, replace = F)])
hist(pressure_idx)
runif(10, 11)
runif(1, 10, 11)
n = 7757
eduaction = as.factor(sample(c("master/phd", "bachelor", "associate", "high", "middle"), n, replace = TRUE, prob = c(28, 545, 973, 1530, 4681)/7757))
gender = as.factor(sample(c("male", "female"), n, replace = TRUE, prob = c(4672, 3085)/7757))
marital = as.factor(sample(c("married", "unmarried", "divorced", "other"), n, replace = TRUE, prob = c(6050, 1698, 5, 4)/7757))
children = as.factor((sample(c("no", "yes"), n, replace = TRUE, prob = c(1765, 5992)/7757)))
treatments = cbind.data.frame(eduaction, gender, marital, children)
X = model.matrix(~eduaction + gender + marital + children, treatments)
beta = c(3.3, -1, 1, -2.8, 1.2, 1.5, 1.2, 0.2, -1.3, 1.85)
pressure_idx = X %*% beta + rnorm(n, 0, 1)
shapiro.test(pressure_idx[sample(1: n, 5000, replace = F)])
pressure_idx = round(pressure_idx, digits = 2)
pressure_idx[pressure_idx > 11] = runif(sum(pressure_idx > 11), 10, 11)
pressure_idx[pressure_idx < 0] = runif(sum(pressure_idx < 0), 0, 1)
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
?tapply
require(stats)
groups <- as.factor(rbinom(32, n = 5, prob = 0.4))
groups
tapply(groups, groups, length)
tapply(pressure_idx, treatments$eduaction, mean)
lapply(1: ncol(treatments), function(i){tapply(pressure_idx, treatments[, i], mean)})
lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], mean), digits = 2)})
lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], sd), digits = 2)})
n = 7757
eduaction = as.factor(sample(c("master/phd", "bachelor", "associate", "high", "middle"), n, replace = TRUE, prob = c(28, 545, 973, 1530, 4681)/7757))
gender = as.factor(sample(c("male", "female"), n, replace = TRUE, prob = c(4672, 3085)/7757))
marital = as.factor(sample(c("married", "unmarried", "divorced", "other"), n, replace = TRUE, prob = c(6050, 1698, 5, 4)/7757))
children = as.factor((sample(c("no", "yes"), n, replace = TRUE, prob = c(1765, 5992)/7757)))
treatments = cbind.data.frame(eduaction, gender, marital, children)
X = model.matrix(~eduaction + gender + marital + children, treatments)
beta = c(3.3, -1, 1, -2.8, 1.2, 1.5, 1.2, 0.2, -1.3, 1.85)
pressure_idx = X %*% beta + rnorm(n, 0, 2)
shapiro.test(pressure_idx[sample(1: n, 5000, replace = F)])
pressure_idx = round(pressure_idx, digits = 2)
pressure_idx[pressure_idx > 11] = runif(sum(pressure_idx > 11), 10, 11)
pressure_idx[pressure_idx < 0] = runif(sum(pressure_idx < 0), 0, 1)
lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], mean), digits = 2)})
lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], sd), digits = 2)})
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
fit = lm(pressure_idx~. data)
fit = lm(pressure_idx~. ,data)
summary(fit)
n = 7757
eduaction = as.factor(sample(c("master/phd", "bachelor", "associate", "high", "middle"), n, replace = TRUE, prob = c(28, 545, 973, 1530, 4681)/7757))
gender = as.factor(sample(c("male", "female"), n, replace = TRUE, prob = c(4672, 3085)/7757))
marital = as.factor(sample(c("married", "unmarried", "divorced", "other"), n, replace = TRUE, prob = c(6050, 1698, 5, 4)/7757))
children = as.factor((sample(c("no", "yes"), n, replace = TRUE, prob = c(1765, 5992)/7757)))
treatments = cbind.data.frame(eduaction, gender, marital, children)
X = model.matrix(~eduaction + gender + marital + children, treatments)
beta = c(3.3, -1, 1, -2.8, 1.2, 1.5, 1.2, 0.2, -1.3, 1.85)
pressure_idx = X %*% beta + rnorm(n, 0, 1)
pressure_idx = round(pressure_idx, digits = 2)
pressure_idx[pressure_idx > 11] = runif(sum(pressure_idx > 11), 10, 11)
pressure_idx[pressure_idx < 0] = runif(sum(pressure_idx < 0), 0, 1)
lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], mean), digits = 2)})
lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], sd), digits = 2)})
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
fit = lm(pressure_idx~. ,data)
summary(fit)
n = 7757
eduaction = as.factor(sample(c("master/phd", "bachelor", "associate", "high", "middle"), n, replace = TRUE, prob = c(28, 545, 973, 1530, 4681)/7757))
gender = as.factor(sample(c("male", "female"), n, replace = TRUE, prob = c(4672, 3085)/7757))
marital = as.factor(sample(c("married", "unmarried", "divorced", "other"), n, replace = TRUE, prob = c(6050, 1698, 5, 4)/7757))
children = as.factor((sample(c("no", "yes"), n, replace = TRUE, prob = c(1765, 5992)/7757)))
treatments = cbind.data.frame(eduaction, gender, marital, children)
X = model.matrix(~eduaction + gender + marital + children, treatments)
beta = c(3.3, -1, 1, -2.8, 1.2, 1.5, 1.2, 0.2, -1.3, 1.85)
pressure_idx = X %*% beta + rnorm(n, 0, 1.5)
pressure_idx = round(pressure_idx, digits = 2)
pressure_idx[pressure_idx > 11] = runif(sum(pressure_idx > 11), 10, 11)
pressure_idx[pressure_idx < 0] = runif(sum(pressure_idx < 0), 0, 1)
lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], mean), digits = 2)})
lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], sd), digits = 2)})
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
fit = lm(pressure_idx~. ,data)
summary(fit)
mean_by_treatments = lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], mean), digits = 2)})
std_by_treatments = lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], sd), digits = 2)})
write.csv(data, file = "covid_workers.csv")
setwd("~/Downloads")
write.table(data, file = "covid_workers.xslx")
write.table(data, file = "covid_workers.xlsx")
write.csv(data, file = "covid_workers.csv")
n = 7757
eduaction = as.factor(sample(c("master/phd", "bachelor", "associate", "high", "middle"), n, replace = TRUE, prob = c(28, 545, 973, 1530, 4681)/7757))
gender = as.factor(sample(c("male", "female"), n, replace = TRUE, prob = c(4672, 3085)/7757))
marital = as.factor(sample(c("married", "unmarried", "divorced", "other"), n, replace = TRUE, prob = c(6050, 1698, 5, 4)/7757))
children = as.factor((sample(c("no", "yes"), n, replace = TRUE, prob = c(1765, 5992)/7757)))
treatments = cbind.data.frame(eduaction, gender, marital, children)
X = model.matrix(~eduaction + gender + marital + children, treatments)
beta = c(3.3, -1, 1, -2.8, 1.2, 1.5, 1.2, 0.2, -1.3, 1.85)
pressure_idx = X %*% beta + rnorm(n, 0, 1.5)
pressure_idx[pressure_idx > 11] = runif(sum(pressure_idx > 11), 10, 11)
pressure_idx[pressure_idx < 0] = runif(sum(pressure_idx < 0), 0, 1)
pressure_idx = round(pressure_idx, digits = 2)
mean_by_treatments = lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], mean), digits = 2)})
std_by_treatments = lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], sd), digits = 2)})
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
fit = lm(pressure_idx~. ,data)
summary(fit)
write.csv(data, file = "covid_workers.csv")
mean_by_treatments
std_by_treatments
fit_aov1 = aov(pressure_idx~eduaction, data)
fit_aov1$effects
coef(fit_aov1)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
n = 7757
eduaction = as.factor(sample(c("master/phd", "bachelor", "associate", "high", "middle"), n, replace = TRUE, prob = c(28, 545, 973, 1530, 4681)/7757))
gender = as.factor(sample(c("male", "female"), n, replace = TRUE, prob = c(4672, 3085)/7757))
marital = as.factor(sample(c("married", "unmarried", "divorced", "other"), n, replace = TRUE, prob = c(6050, 1698, 5, 4)/7757))
children = as.factor((sample(c("no", "yes"), n, replace = TRUE, prob = c(1765, 5992)/7757)))
treatments = cbind.data.frame(eduaction, gender, marital, children)
X = model.matrix(~eduaction + gender + marital + children, treatments)
beta = c(3.3, -1, 1, -2.8, 1.2, 1.5, 1.2, 0.2, -1.3, 1.85)
pressure_idx = X %*% beta + rnorm(n, 0, 1.5)
pressure_idx[pressure_idx > 11] = runif(sum(pressure_idx > 11), 10, 11)
pressure_idx[pressure_idx < 0] = runif(sum(pressure_idx < 0), 0, 1)
pressure_idx = round(pressure_idx, digits = 2)
mean_by_treatments = lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], mean), digits = 2)})
std_by_treatments = lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], sd), digits = 2)})
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
fit = lm(pressure_idx~. ,data)
summary(fit)
write.csv(data, file = "covid_workers.csv")
mean_by_treatments
n = 7757
eduaction = as.factor(sample(c("master/phd", "bachelor", "associate", "high", "middle"), n, replace = TRUE, prob = c(28, 545, 973, 1530, 4681)/7757))
gender = as.factor(sample(c("male", "female"), n, replace = TRUE, prob = c(4672, 3085)/7757))
marital = as.factor(sample(c("married", "unmarried", "divorced", "other"), n, replace = TRUE, prob = c(6050, 1698, 5, 4)/7757))
children = as.factor((sample(c("no", "yes"), n, replace = TRUE, prob = c(1765, 5992)/7757)))
treatments = cbind.data.frame(eduaction, gender, marital, children)
X = model.matrix(~eduaction + gender + marital + children, treatments)
beta = c(3.3, -1, 1, -2.8, 1.2, 1.5, 1.2, 0.2, -1.3, 1.85)
pressure_idx = X %*% beta + rnorm(n, 0, 1.5)
pressure_idx[pressure_idx > 11] = runif(sum(pressure_idx > 11), 10, 11)
pressure_idx[pressure_idx < 0] = runif(sum(pressure_idx < 0), 0, 1)
pressure_idx = round(pressure_idx, digits = 2)
mean_by_treatments = lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], mean), digits = 2)})
names(mean_by_treatments) = c("eduaction", "gender", "marital", "children")
std_by_treatments = lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], sd), digits = 2)})
names(mean_by_treatments) = c("eduaction", "gender", "marital", "children")
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
fit = lm(pressure_idx~. ,data)
summary(fit)
write.csv(data, file = "covid_workers.csv")
mean_by_treatments
names(std_by_treatments) = c("eduaction", "gender", "marital", "children")
std_by_treatments
max
max(data)
max(pressure_idx
)
min(pressure_idx)
n = 7757
eduaction = as.factor(sample(c("master/phd", "bachelor", "associate", "high", "middle"), n, replace = TRUE, prob = c(28, 545, 973, 1530, 4681)/7757))
gender = as.factor(sample(c("male", "female"), n, replace = TRUE, prob = c(4672, 3085)/7757))
marital = as.factor(sample(c("married", "unmarried", "divorced", "other"), n, replace = TRUE, prob = c(6050, 1698, 5, 4)/7757))
children = as.factor((sample(c("no", "yes"), n, replace = TRUE, prob = c(1765, 5992)/7757)))
treatments = cbind.data.frame(eduaction, gender, marital, children)
X = model.matrix(~eduaction + gender + marital + children, treatments)
beta = c(3.3, -1, 1, -2.8, 1.2, 1.5, 1.2, 0.2, -1.3, 1.85)
pressure_idx = X %*% beta + rnorm(n, 0, 1.5)
pressure_idx[pressure_idx > 11] = runif(sum(pressure_idx > 11), 10, 11)
pressure_idx[pressure_idx < 0] = runif(sum(pressure_idx < 0), 0.5, 1)
pressure_idx = round(pressure_idx, digits = 2)
mean_by_treatments = lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], mean), digits = 2)})
names(mean_by_treatments) = c("eduaction", "gender", "marital", "children")
std_by_treatments = lapply(1: ncol(treatments), function(i){round(tapply(pressure_idx, treatments[, i], sd), digits = 2)})
names(std_by_treatments) = c("eduaction", "gender", "marital", "children")
data = cbind.data.frame(pressure_idx, treatments)
summary(aov(pressure_idx~eduaction, data))
summary(aov(pressure_idx~gender, data))
summary(aov(pressure_idx~marital, data))
summary(aov(pressure_idx~children, data))
fit = lm(pressure_idx~. ,data)
summary(fit)
write.csv(data, file = "covid_workers.csv")
max(pressure_idx)
min(pressure_idx)
mean_by_treatments
std_by_treatments
write.csv(data, file = "covid_workers.csv")
pressure_idx
n = 7757
eduaction = as.factor(sample(c("master/phd", "bachelor", "associate", "high", "middle"), n, replace = TRUE, prob = c(28, 545, 973, 1530, 4681)/7757))
gender = as.factor(sample(c("male", "female"), n, replace = TRUE, prob = c(4672, 3085)/7757))
marital = as.factor(sample(c("married", "unmarried", "divorced", "other"), n, replace = TRUE, prob = c(6050, 1698, 5, 4)/7757))
children = as.factor((sample(c("no", "yes"), n, replace = TRUE, prob = c(1765, 5992)/7757)))
treatments = cbind.data.frame(eduaction, gender, marital, children)
X = model.matrix(~eduaction + gender + marital + children, treatments)
beta = c(3.3, -1, 1, -2.8, 1.2, 1.5, 1.2, 0.2, -1.3, 1.85)
library(Rfast)
library(RcppAlgos)
library(rbenchmark)
library(parallel)
if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM")) &&
Sys.info()["sysname"] == "Darwin" && getRversion() >= "4.0.0") {
parallel:::setDefaultClusterOptions(setup_strategy = "sequential")
}
n <- 100; e <- 10; sig2 <- 1; pcs <- 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(sig2, e)))
library(Rtropical)
troproj.linsp = function(x, V){
if(is.vector(x)) x = t(as.matrix(x))
n = nrow(x); e = ncol(x)
all_dets = array(NA, dim = c(e-2, e-1, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
data_proj = matrix(0, nrow = n, ncol = e)
for (i in 1: e){
# i = 1
all_tau = comboGeneral(c(1: e)[-i], pcs - 1)
all_tau = lapply(1: nrow(all_tau), function(i){all_tau[i, ]})
temp2 = lapply(all_tau, function(tau){
all_j = c(1: e)[-tau]
temp_block = eachrow(x[, all_j], all_dets[rowSort(cbind(all_j, matrix(tau, ncol = 2, nrow = (e-pcs+1), byrow = T)))], "-")
return(rowMins(temp_block, T) + trop_det(V[, c(tau, i)]))
})
temp2 = do.call(cbind, temp2)
data_proj[, i] = rowMaxs(temp2, T)
}
data_proj
}
tropca.linsp = function(x, pcs = 3, size = 100, ncores = 2, exhaust = FALSE){
all_choices <- comboGeneral(nrow(x), pcs)
if (exhaust){
all_choices <- lapply(1: nrow(all_choices), function(i) all_choices[i, ])
} else{
all_choices <- lapply(sample(1: nrow(all_choices), n, replace = F), function(i) all_choices[i, ])
}
cl <- makeCluster(ncores)
all_objs <- parLapply(cl, all_choices, function(ind){
V <- x[ind, ]
proj <- troproj.linsp(x, V)
temp <- x - proj
sum(rowMaxs(temp, T) - rowMaxs(temp, F))
})
best_choice <- all_choices[[which.min(all_objs)]]
pc <- x[best_choice, ]
rownames(pc) <- paste("pc", 1: pcs, sep = "")
proj_points <- troproj.linsp(x, pc)
tropca.out <- list("pc" = pc,
"obj" = min(all_objs),
"projection" = proj_points)
class(tropca.out) <- "tropca"
tropca.out
}
tropca.linsp(x)
troproj.linsp = function(x, V){
if(is.vector(x)) x = t(as.matrix(x))
n = nrow(x); e = ncol(x)
all_dets = array(NA, dim = c(e-2, e-1, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
data_proj = matrix(0, nrow = n, ncol = e)
for (i in 1: e){
# i = 1
all_tau = comboGeneral(c(1: e)[-i], pcs - 1)
all_tau = lapply(1: nrow(all_tau), function(i){all_tau[i, ]})
temp2 = lapply(all_tau, function(tau){
all_j = c(1: e)[-tau]
temp_block = eachrow(x[, all_j], all_dets[rowSort(cbind(all_j, matrix(tau, ncol = 2, nrow = (e-pcs+1), byrow = T)))], "-")
return(rowMins(temp_block, T) + trop_det(V[, c(tau, i)]))
})
temp2 = do.call(cbind, temp2)
data_proj[, i] = rowMaxs(temp2, T)
}
data_proj
}
tropca.linsp = function(x, pcs = 3, size = 100, ncores = 2, exhaust = FALSE){
all_choices <- comboGeneral(nrow(x), pcs)
if (exhaust){
all_choices <- lapply(1: nrow(all_choices), function(i) all_choices[i, ])
} else{
all_choices <- lapply(sample(1: nrow(all_choices), n, replace = F), function(i) all_choices[i, ])
}
cl <- makeCluster(ncores)
all_objs <- parLapply(cl, all_choices, function(ind){
V <- x[ind, ]
proj <- troproj.linsp(x, V)
temp <- x - proj
sum(rowMaxs(temp, T) - rowMaxs(temp, F))
})
best_choice <- all_choices[[which.min(all_objs)]]
pc <- x[best_choice, ]
rownames(pc) <- paste("pc", 1: pcs, sep = "")
proj_points <- troproj.linsp(x, pc)
tropca.out <- list("pc" = pc,
"obj" = min(all_objs),
"projection" = proj_points)
class(tropca.out) <- "tropca"
tropca.out
}
troproj.linsp(x, x[1: 3, ])
library(Rtropical)
troproj.linsp = function(x, V){
if(is.vector(x)) x = t(as.matrix(x))
n = nrow(x); e = ncol(x)
all_dets = array(NA, dim = c(e-2, e-1, e))
all_combns = comboGeneral(1: e, pcs)
all_combns_list = lapply(1: nrow(all_combns), function(i){all_combns[i, ]})
all_dets[all_combns] = unlist(lapply(all_combns_list, function(i){tropdet(V[, i])}))
data_proj = matrix(0, nrow = n, ncol = e)
for (i in 1: e){
# i = 1
all_tau = comboGeneral(c(1: e)[-i], pcs - 1)
all_tau = lapply(1: nrow(all_tau), function(i){all_tau[i, ]})
temp2 = lapply(all_tau, function(tau){
all_j = c(1: e)[-tau]
temp_block = eachrow(x[, all_j], all_dets[rowSort(cbind(all_j, matrix(tau, ncol = 2, nrow = (e-pcs+1), byrow = T)))], "-")
return(rowMins(temp_block, T) + tropdet(V[, c(tau, i)]))
})
temp2 = do.call(cbind, temp2)
data_proj[, i] = rowMaxs(temp2, T)
}
data_proj
}
troproj.linsp(x, x[1: 3, ])
tropca.linsp = function(x, pcs = 3, size = 100, ncores = 2, exhaust = FALSE){
all_choices <- comboGeneral(nrow(x), pcs)
if (exhaust){
all_choices <- lapply(1: nrow(all_choices), function(i) all_choices[i, ])
} else{
all_choices <- lapply(sample(1: nrow(all_choices), n, replace = F), function(i) all_choices[i, ])
}
cl <- makeCluster(ncores)
all_objs <- parLapply(cl, all_choices, function(ind){
V <- x[ind, ]
proj <- troproj.linsp(x, V)
temp <- x - proj
sum(rowMaxs(temp, T) - rowMaxs(temp, F))
})
best_choice <- all_choices[[which.min(all_objs)]]
pc <- x[best_choice, ]
rownames(pc) <- paste("pc", 1: pcs, sep = "")
proj_points <- troproj.linsp(x, pc)
tropca.out <- list("pc" = pc,
"obj" = min(all_objs),
"projection" = proj_points)
class(tropca.out) <- "tropca"
tropca.out
}
tropca.linsp(x)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
?trop_det2d
?trop_det3d
rm(list)
rm(list = ls())
library(Rfast)
library(RcppAlgos)
library(rbenchmark)
library(parallel)
library(Rtropical)
if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM")) &&
Sys.info()["sysname"] == "Darwin" && getRversion() >= "4.0.0") {
parallel:::setDefaultClusterOptions(setup_strategy = "sequential")
}
n <- 100; e <- 10; sig2 <- 1; pcs <- 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(sig2, e)))
troproj.linsp(x, x[1: 3, ])
tropca.linsp(x)
library(Rtropical)
rm(list = ls())
library(Rfast)
library(RcppAlgos)
library(rbenchmark)
library(parallel)
library(Rtropical)
if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM")) &&
Sys.info()["sysname"] == "Darwin" && getRversion() >= "4.0.0") {
parallel:::setDefaultClusterOptions(setup_strategy = "sequential")
}
n <- 100; e <- 10; sig2 <- 1; pcs <- 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(sig2, e)))
tropca.linsp(x)
library(Rtropical)
tropca.linsp(x)
rm(list = ls())
library(Rfast)
library(RcppAlgos)
library(rbenchmark)
library(parallel)
library(Rtropical)
if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM")) &&
Sys.info()["sysname"] == "Darwin" && getRversion() >= "4.0.0") {
parallel:::setDefaultClusterOptions(setup_strategy = "sequential")
}
n <- 100; e <- 10; sig2 <- 1; pcs <- 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(sig2, e)))
tropca.linsp(x)
trop_det3d(matrix(1: 9, nrow = 3))
trop_det3d(matrix(1: 4, nrow = 2))
trop_det2d(matrix(1: 4, nrow = 2))
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(glmnet)
?glmnet
?Normal
library(Rtropical)
?assignment_finder
rm(list = ls())
library(Rfast)
library(RcppAlgos)
library(rbenchmark)
library(parallel)
library(Rtropical)
if (Sys.getenv("RSTUDIO") == "1" && !nzchar(Sys.getenv("RSTUDIO_TERM")) &&
Sys.info()["sysname"] == "Darwin" && getRversion() >= "4.0.0") {
parallel:::setDefaultClusterOptions(setup_strategy = "sequential")
}
n <- 100; e <- 10; sig2 <- 1; pcs <- 3
x <- rbind(rmvnorm(n, mu = c(5, -5, rep(0, e-2)), sigma = diag(sig2, e)))
tropca.linsp(x)
