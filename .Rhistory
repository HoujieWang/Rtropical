library(Rtropical)
library(ape)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
data(apicomplexa)
.compressTipLabel(apicomplexa)
library(Rtropical)
library(Rtropical)
library(ape)
data(apicomplexa)
.compressTipLabel(apicomplexa)
apicomplexa[[1]]
treevecs <- do.call("rbind", lapply(.compressTipLabel(apicomplexa), vec.fun))
treevecs
colnames(treevecs)
rownames(treevecs)
?tropca.poly
pca_fit <- tropca.poly(treevecs)
pca_fit
tropFW(pca_fit$projection)
S_reg <- tropFW(pca_fit$projection)
S_reg$distsum/(S_reg$distsum + pca_fit$obj)
summary(prcomp(treevecs))
plot(pca_fit)
apicomplexa
apicomplexa
View(apicomplexa)
setwd("~/Downloads/Research/Tropical/All Tree Data")
library(ape)
library(Rtropical)
library(ape)
library(Rtropical)
treesA = read.nexus("5TaxaA.nex")
treesB = read.nexus("5TaxaB.nex")
treesA
treesA[[1]]
apicomplexa[[1]]
apicomplexa[[2]]
apicomplexa[[3]]
.compressTipLabel(apicomplexa)[[1]]
.compressTipLabel(apicomplexa)[[3]]
lapply(treesA, vec.fun)
do.call("rbind", append(lapply(treesA, vec.fun), lapply(treesB, vec.fun)))
library(ape)
library(Rtropical)
treesA = read.nexus("5TaxaA.nex")
treesB = read.nexus("5TaxaB.nex")
do.call("rbind", append(lapply(treesA, vec.fun), lapply(treesB, vec.fun)))
vec.fun
rcoal(5)
rcoal(5)
vec.fun(rcoal(5))
read.nexus.to.data.matrix("genetree_S1_r025.dat", "genetree_S2_r025.dat")
data = read.nexus.to.data.matrix("genetree_S1_r025.dat", "genetree_S2_r025.dat")
data
data =
svm_fit = tropsvm(as.matrix(data[, -1]), data[, 1])
?tropsvm
svm_fit = tropsvm(as.matrix(data[, -1]), data[, 1], auto.assignment = TRUE)
svm_fit = cv.tropsvm(as.matrix(data[, -1]), data[, 1], nassignment = 500)
name1 = paste("Tree", C, "A.txt", sep = ""); name2 = paste("Tree", C, "B.txt", sep = "")
P = read.tree(name1); Q = read.tree(name2)
all_data = matrix(unlist(lapply(append(P,Q),
function(x){cophenetic.phylo(x)[lower.tri(cophenetic.phylo(x))]})), nrow = 300, byrow = T)
library(Rtropical)
library(Rtropical)
library(ape)
data("sim_trees")
sim_trees
data(sim_trees)
treevecs = do.call("rbind", lapply(append(P,Q), vec.fun))
treevecs = do.call("rbind", lapply(sim_trees, vec.fun))
treevecs
labels = as.factor(rep(c(1, 2), each = length(treevecs)/2))
# generate training data set
trn_ind = sample(1: nrow(treevecs), length(treevecs)*0.8)
# generate training data set
trn_ind = sample(1: nrow(treevecs), nrow(treevecs)*0.8)
class(treevecs)
library(e1071)
data(sim_trees)
treevecs = do.call("rbind", lapply(sim_trees, vec.fun))
labels = as.factor(rep(c(1, 2), each = length(treevecs)/2))
# generate training data set
trn_ind = sample(1: nrow(treevecs), nrow(treevecs)*0.8)
x = treevecs[trn_ind, ]
y = labels[trn_ind]
# generate testing data set
newx = treevecs[-trn_ind, ]
newy = labels[-trn_ind]
# euclidean svm
svm_fit = svm(x, y)
x
y
trn_ind
treevecs
labels
nrow(treevecs)/2)
data(sim_trees)
treevecs = do.call("rbind", lapply(sim_trees, vec.fun))
labels = as.factor(rep(c(1, 2), each = nrow(treevecs)/2))
# generate training data set
trn_ind = sample(1: nrow(treevecs), nrow(treevecs)*0.8)
x = treevecs[trn_ind, ]
y = labels[trn_ind]
# generate testing data set
newx = treevecs[-trn_ind, ]
newy = labels[-trn_ind]
# euclidean svm
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
# tropical svm with cross-validation
start = Sys.time()
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 500, parallel = TRUE, ncores = 4)
end = Sys.time()
end - start
cv.svmpredict <- predict(cv.svmmodel, newx)
sum(cv.svmpredict == newy)/length(newy)
set.seed(101)
data(sim_trees)
treevecs = do.call("rbind", lapply(sim_trees, vec.fun))
labels = as.factor(rep(c(1, 2), each = nrow(treevecs)/2))
# generate training data set
trn_ind = sample(1: nrow(treevecs), nrow(treevecs)*0.8)
x = treevecs[trn_ind, ]
y = labels[trn_ind]
# generate testing data set
newx = treevecs[-trn_ind, ]
newy = labels[-trn_ind]
# euclidean svm
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
# tropical svm with cross-validation
start = Sys.time()
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 500, parallel = TRUE, ncores = 4)
end = Sys.time()
end - start
cv.svmpredict <- predict(cv.svmmodel, newx)
sum(cv.svmpredict == newy)/length(newy)
cv.svmpredict
# tropical svm with cross-validation
start = Sys.time()
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 100, parallel = TRUE, ncores = 4)
end = Sys.time()
end - start
cv.svmpredict <- predict(cv.svmmodel, newx)
sum(cv.svmpredict == newy)/length(newy)
set.seed(101)
data(sim_trees)
treevecs = do.call("rbind", lapply(sim_trees, vec.fun))
labels = as.factor(rep(c(1, 2), each = nrow(treevecs)/2))
# generate training data set
trn_ind = sample(1: nrow(treevecs), nrow(treevecs)*0.8)
x = treevecs[trn_ind, ]
y = labels[trn_ind]
# generate testing data set
newx = treevecs[-trn_ind, ]
newy = labels[-trn_ind]
# euclidean svm
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
# tropical svm with cross-validation
start = Sys.time()
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 300, parallel = TRUE, ncores = 4)
end = Sys.time()
end - start
cv.svmpredict <- predict(cv.svmmodel, newx)
sum(cv.svmpredict == newy)/length(newy)
---
title: "The `Rtropical` package"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{usage}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
```{r, include = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
```
In this vignette, we will demonstrate the main capabilities of the `Rtropical` package. This includes tropical SVM and tropical PCA. We'll show the pipeline to analyze phylogenetic tree data with these methods.
We start by importing the `Rtropical` library.
```{r setup}
library(Rtropical)
library(ape)
library(e1071)
```
## Tropical SVM
We will carry out tropical SVM with the simulated tree data in the package. This data set contains 300 trees with the first 150 assumed coming from one category and the rest from the other.
```{r}
set.seed(101)
data(sim_trees)
treevecs = do.call("rbind", lapply(sim_trees, vec.fun))
labels = as.factor(rep(c(1, 2), each = nrow(treevecs)/2))
# generate training data set
trn_ind = sample(1: nrow(treevecs), nrow(treevecs)*0.8)
x = treevecs[trn_ind, ]
y = labels[trn_ind]
# generate testing data set
newx = treevecs[-trn_ind, ]
newy = labels[-trn_ind]
# euclidean svm
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
# tropical svm with cross-validation
start = Sys.time()
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 500, parallel = TRUE, ncores = 4)
end = Sys.time()
end - start
cv.svmpredict <- predict(cv.svmmodel, newx)
sum(cv.svmpredict == newy)/length(newy)
```
```{r}
data(apicomplexa)
.compressTipLabel(apicomplexa)
treevecs <- do.call("rbind", lapply(.compressTipLabel(apicomplexa), vec.fun))
treevecs
```
set.seed(101)
data(sim_trees)
treevecs = do.call("rbind", lapply(sim_trees, vec.fun))
labels = as.factor(rep(c(1, 2), each = nrow(treevecs)/2))
# generate training data set
trn_ind = sample(1: nrow(treevecs), nrow(treevecs)*0.8)
x = treevecs[trn_ind, ]
y = labels[trn_ind]
# generate testing data set
newx = treevecs[-trn_ind, ]
newy = labels[-trn_ind]
# euclidean svm
svm_fit = svm(x, y)
sum(predict(svm_fit, newx) == newy)/length(newy)
# tropical svm with cross-validation
start = Sys.time()
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 500, parallel = TRUE, ncores = 4)
end = Sys.time()
end - start
cv.svmpredict <- predict(cv.svmmodel, newx)
sum(cv.svmpredict == newy)/length(newy)
?svm
trop_fit <- tropsvm(x, y, auto.assignment = TRUE)
trop_pred <- predict(trop_fit, newx)
sum(as.vector(trop_pred) == newy)/length(newy)
print(paste("The running time is: ", end - start, sep = ""))
print(paste("The running time is: ", round(end - start, digits = 3), "s", sep = ""))
# run tropical svm
start = Sys.time()
trop_fit <- tropsvm(x, y, auto.assignment = TRUE)
end = Sys.time()
# predict for testing data
trop_pred <- predict(trop_fit, newx)
# compute classification accuracy
sum(as.vector(trop_pred) == newy)/length(newy)
print(paste("The running time is: ", round(end - start, digits = 3), "s", sep = ""))
# tropical svm with cross-validation
start = Sys.time()
cv.svmmodel <- cv.tropsvm(x, y, nassignment = 500, parallel = TRUE, ncores = 4)
pca_fit = tropca.poly(treevecs, ncores = 4)
pca_fit
plot(pca_fit)
pca_fit
data(apicomplexa)
treevecs <- do.call("rbind", lapply(.compressTipLabel(apicomplexa), vec.fun))
treevecs
pca_fit = tropca.poly(treevecs, ncores = 4)
pca_fit
plot(pca_fit)
tropFW(apicomplexa)
apicomplexa
tropFW(treevecs)
library(Rtropical)
library(Rtropical)
library(Rtropical)
?cv.tropsvm
library(Rtropical)
?troppca.poly
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(Rtropical)
library(ape)
library(e1071)
data(apicomplexa)
treevecs <- do.call("rbind", lapply(.compressTipLabel(apicomplexa), vec.fun))
pca_fit = troppca.poly(treevecs)
plot(pca_fit)
treevecs
pca_fit$pc
pca_fit
